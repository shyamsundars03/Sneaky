<style>
/* Modal Styles */
.modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    overflow-y: auto;
    padding: 2rem;
}

.modal {
    background: white;
    max-width: 600px;
    margin: 0 auto;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-title {
    font-size: 1.25rem;
    font-weight: 600;
}

.close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
}

.modal-body {
    padding: 1.5rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.form-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
}

.form-input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.modal-footer {
    padding: 1.5rem;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
}

.btn {
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    border: none;
}

.btn-primary {
    background: var(--primary-color);
    color: white;
}

.btn-secondary {
    background: #6c757d;
    color: white;
}
.address-list{
    border: 1px solid red;
    border-radius: 10px;
}


/* Error message style */
.error-message {
    color: var(--danger-color);
    font-size: 0.85rem;
    margin-top: 0.5rem;
    display: none;
}

.form-input.error {
    border-color: var(--danger-color);
}
button[disabled] {
    opacity: 0.7;
    cursor: not-allowed;
}

.fa-spinner {
    margin-right: 5px;
}
.invalid-feedback{
    color: red;
}
.btn-address{
    color: white;
    background-color: red;
    border: none;
    border-radius: 5px;
    height: 60px;
    width: 120px;
}

</style>

<%- include("../../views/partials/user/header") %>

<section class="address-banner">
    <div class="container">
        <h1>ADDRESS</h1>
    </div>
</section>

<section class="address-section">
    <div class="container">
        <div class="address-content">
            <!-- Sidebar -->
            <div class="account-sidebar">
                <div class="profile-image-container">
                    <div class="profile-image" onclick="window.location.href='/profile'" style="cursor: pointer;">
                        <img id="profileImg" src="<%= user.profileImage || 'https://via.placeholder.com/150' %>" alt="Profile Picture">
                    </div>
                </div>
                <h2 class="account-name"><%= user.name || '' %></h2>
                <p class="account-email"><%= user.email || '' %></p>
                <ul class="sidebar-menu">
                    <li><a href="/orders"><i class="fas fa-box"></i> Orders</a></li>
                    <li><a href="/address"><i class="fas fa-map-marker-alt"></i> Address</a></li>
                    <li><a href="/wallet"><i class="fas fa-wallet"></i> Wallet</a></li>
                    <li><a href="#" id="signOutBtn"><i class="fas fa-sign-out-alt"></i> Sign Out</a></li>
            </div>

            <!-- Address Details -->
            <div class="address-details">
                <h2>Addresses</h2>
                <button class="add-address-btn" id="openAddressModal">
                    <i class="fas fa-plus"></i> ADD A NEW ADDRESS
                </button>

                <div class="address-list">
                    <% addresses.forEach(address => { %>
                        <div class="address-card">
                            <p class="address-id"><%= address.name %></p>
                            <p class="address-text"><%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.zip %>, <%= address.country %></p>
                            <div class="address-actions">
                                <button class="address-action-btn edit" onclick="openAddressModal('edit', <%= JSON.stringify(address) %>)">
                                    <i class="fas fa-pencil-alt"></i>
                                </button>
                                <button class="address-action-btn delete" onclick="confirmDeleteAddress('<%= address._id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Modal for Adding/Editing Address -->
<div id="addressModal" class="modal-overlay" style="display:none;">
    <div class="modal">
        <div class="modal-header">
            <h2 id="modalTitle">Add New Address</h2>
            <button class="close-btn" id="closeAddressModal">&times;</button>
        </div>
        <div class="modal-body">
            <form id="addressForm" action="/address/save" method="POST">
                <input type="hidden" name="id" id="addressId" />
                <div class="form-group">
                    <label class="form-label">Name</label>
                    <input type="text" name="name" id="addressName" class="form-input" placeholder="Name"/>
                    <div class="invalid-feedback" id="nameError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">Street</label>
                    <input type="text" name="street" id="addressStreet" class="form-input" placeholder="Street" />
                    <div class="invalid-feedback" id="streetError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">City</label>
                    <input type="text" name="city" id="addressCity" class="form-input" placeholder="City"  />
                    <div class="invalid-feedback" id="cityError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">State</label>
                    <input type="text" name="state" id="addressState" class="form-input" placeholder="State"  />
                    <div class="invalid-feedback" id="stateError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">Zip Code</label>
                    <input type="text" name="zip" id="addressZip" class="form-input" placeholder="Zip Code" maxlength="6" />
                    <div class="invalid-feedback" id="zipError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">Country</label>
                    <input type="text" name="country" id="addressCountry" class="form-input" placeholder="Country"  />
                    <div class="invalid-feedback" id="countryError"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-address" id="closeAddressModal">Cancel</button>
                    <button type="submit" class="btn-address">Save Address</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal-overlay" id="confirmDialog" style="display:none;">
    <div class="modal">
        <div class="modal-header">
            <h2>Delete Address</h2>
            <button class="close-btn" onclick="closeModal('confirmDialog')">&times;</button>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete this address?</p>
            <p class="text-danger">This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary" onclick="closeModal('confirmDialog')">Cancel</button>
            <button class="btn btn-danger" onclick="deleteAddress()">Delete</button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

    // Address validation functions
    function validateName(name) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(name) && name.trim().length > 1;
    }

    function validateStreet(street) {
        return street.trim().length > 0;
    }

    function validateCity(city) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(city) && city.trim().length > 0;
    }

    function validateState(state) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(state) && state.trim().length > 0;
    }

    function validateZip(zip) {
        const regex = /^\d{6}$/;
        return regex.test(zip);
    }

    function validateCountry(country) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(country) && country.trim().length > 0;
    }

    // Show validation error
    function showValidationError(field, message) {
        const errorElement = document.getElementById(`${field}Error`);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            document.getElementById(`address${field.charAt(0).toUpperCase() + field.slice(1)}`).classList.add('is-invalid');
        }
    }

    // Clear validation error
    function clearValidationError(field) {
        const errorElement = document.getElementById(`${field}Error`);
        if (errorElement) {
            errorElement.textContent = '';
            errorElement.style.display = 'none';
            document.getElementById(`address${field.charAt(0).toUpperCase() + field.slice(1)}`).classList.remove('is-invalid');
        }
    }

    // Validate entire form
    function validateAddressForm(formData) {
        let isValid = true;

        // Validate name
        if (!validateName(formData.name)) {
            showValidationError('name', 'Name must contain only letters and be at least 2 characters long');
            isValid = false;
        } else {
            clearValidationError('name');
        }

        // Validate street
        if (!validateStreet(formData.street)) {
            showValidationError('street', 'Street address is required');
            isValid = false;
        } else {
            clearValidationError('street');
        }

        // Validate city
        if (!validateCity(formData.city)) {
            showValidationError('city', 'City must contain only letters');
            isValid = false;
        } else {
            clearValidationError('city');
        }

        // Validate state
        if (!validateState(formData.state)) {
            showValidationError('state', 'State must contain only letters');
            isValid = false;
        } else {
            clearValidationError('state');
        }

        // Validate zip
        if (!validateZip(formData.zip)) {
            showValidationError('zip', 'Zip code must be exactly 6 digits');
            isValid = false;
        } else {
            clearValidationError('zip');
        }

        // Validate country
        if (!validateCountry(formData.country)) {
            showValidationError('country', 'Country must contain only letters');
            isValid = false;
        } else {
            clearValidationError('country');
        }

        return isValid;
    }

    // Function to create address card HTML
    function createAddressCard(address) {
        return `
            <div class="address-card" id="address-${address._id}">
                <p class="address-id">${address.name}</p>
                <p class="address-text">${address.street}, ${address.city}, ${address.state}, ${address.zip}, ${address.country}</p>
                <div class="address-actions">
                    <button class="address-action-btn edit" onclick="openAddressModal('edit', ${JSON.stringify(address).replace(/"/g, '&quot;')})">
                        <i class="fas fa-pencil-alt"></i>
                    </button>
                    <button class="address-action-btn delete" onclick="confirmDeleteAddress('${address._id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `;
    }


// Function to update address list
function updateAddressList(address, isNew = false) {
        const addressList = document.querySelector('.address-list');
        if (isNew) {
            // Add new address card at the beginning
            addressList.insertAdjacentHTML('afterbegin', createAddressCard(address));
        } else {
            // Update existing address card
            const addressCard = document.getElementById(`address-${address._id}`);
            if (addressCard) {
                addressCard.outerHTML = createAddressCard(address);
            }
        }
    }






    // Open address modal
    document.getElementById('openAddressModal').onclick = function() {
        document.getElementById('addressModal').style.display = 'block';
        document.getElementById('addressForm').reset();
        document.getElementById('modalTitle').textContent = 'Add New Address';
        document.getElementById('addressId').value = '';
        // Clear any previous validation errors
        ['name', 'street', 'city', 'state', 'zip', 'country'].forEach(field => {
            clearValidationError(field);
        });
    };

     // Close address modal
     document.getElementById('closeAddressModal').onclick = function() {
        document.getElementById('addressModal').style.display = 'none';
    };

     // Open address modal in edit mode
     function openAddressModal(mode, address) {
        document.getElementById('addressModal').style.display = 'block';
        if (mode === 'edit') {
            document.getElementById('modalTitle').textContent = 'Edit Address';
            document.getElementById('addressId').value = address._id;
            document.getElementById('addressName').value = address.name;
            document.getElementById('addressStreet').value = address.street;
            document.getElementById('addressCity').value = address.city;
            document.getElementById('addressState').value = address.state;
            document.getElementById('addressZip').value = address.zip;
            document.getElementById('addressCountry').value = address.country;
            // Clear any previous validation errors
            ['name', 'street', 'city', 'state', 'zip', 'country'].forEach(field => {
                clearValidationError(field);
            });
        }
    }
    // Delete address functionality
    let addressToDelete = null;

    function confirmDeleteAddress(addressId) {
        addressToDelete = addressId;
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                deleteAddress();
            }
        });
    }







    async function deleteAddress() {
        if (!addressToDelete) return;

        try {
            const response = await fetch(`/address/delete/${addressToDelete}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Remove the address card from the DOM
                const addressCard = document.getElementById(`address-${addressToDelete}`);
                if (addressCard) {
                    addressCard.remove();
                }
                
                Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: data.message,
                    showConfirmButton: false,
                    timer: 1500
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to delete address');
            }
        } catch (error) {
            console.error("Error deleting address:", error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Failed to delete address.',
            });
        }
    }

    // Form submission handler with validation
    document.getElementById('addressForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const form = e.target;
        const submitBtn = form.querySelector('button[type="submit"]');
        
        // Disable the submit button to prevent multiple clicks
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
        
        try {
            // Create form data object
            const formData = {
                id: form.addressId.value,
                name: form.name.value.trim(),
                street: form.street.value.trim(),
                city: form.city.value.trim(),
                state: form.state.value.trim(),
                zip: form.zip.value.trim(),
                country: form.country.value.trim()
            };

            // Validate form
            if (!validateAddressForm(formData)) {
                throw new Error('Please correct the form errors');
            }

            const response = await fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });
            
            const data = await response.json();
            
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    // Update the UI with the new/updated address
                    updateAddressList(data.address, !formData.id);
                    // Close the modal
                    document.getElementById('addressModal').style.display = 'none';
                    window.location.reload()
                });
            } else {
                throw new Error(data.message || 'Failed to save address');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'An unexpected error occurred',
            });
        } finally {
            // Re-enable the submit button
            submitBtn.disabled = false;
            submitBtn.innerHTML = 'Save Address';
        }
    });


</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const signOutBtn = document.getElementById('signOutBtn');

        if (signOutBtn) {
            signOutBtn.addEventListener('click', function (event) {
                event.preventDefault();

                // SweetAlert2 confirmation modal
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You are about to sign out. Do you want to continue?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, sign out!',
                    cancelButtonText: 'Cancel',
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send a POST request to /logout
                        fetch('/logout', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                        .then(response => {
                            if (response.redirected) {
                                // Redirect to the home page after logout
                                window.location.href = response.url;
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Something went wrong while signing out!',
                            });
                        });
                    }
                });
            });
        } else {
            console.error('Error: Could not find Sign Out button.');
        }
    });
</script>
<%- include("../../views/partials/user/footer") %>
        
</body>
</html>