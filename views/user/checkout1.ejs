<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="0">



<style>
    /* Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        overflow-y: auto;
        padding: 2rem;
    }
    
    .modal {
        background: white;
        max-width: 600px;
        margin: 0 auto;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
    }
    
    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
    }
    
    .modal-body {
        padding: 1.5rem;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
        font-size: larger;
    }

    
    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        width: 100%;
    }
    
    .form-group input {
        width: 100%;
        margin-top: 5px;
        padding: 0.75rem;
        border: 1px solid #959595;
        border-radius: 10px;
        font-size: 1rem;
    }
    
    .form-input:focus {
        outline: none;
        border-color: var(--primary-color);
    }
    
    .modal-footer {
        padding: 1.5rem;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }
    
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        border: none;
    }
    
    .btn-primary {
        background: var(--primary-color);
        color: white;
    }
    
    .btn-secondary {
        background: #6c757d;
        color: white;
    }
    .address-list{
        border: 1px solid red;
        border-radius: 10px;
    }
    
    
    /* Error message style */
    .error-message {
        color: var(--danger-color);
        font-size: 0.85rem;
        margin-top: 0.5rem;
        display: none;
    }
    
    .form-input.error {
        border-color: var(--danger-color);
    }
    .btn-btn{
        border: none;
            border-radius: 5px;
            background-color: red;
            color: white;
            height: 49px;
            width: 100px;
    }
/* Shipping Method Styles (now matching address cards) */
.shipping-options-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 10px;
}

.shipping-option-card {
    display: block;
    padding: 15px;
    border: 2px solid #ddd;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.shipping-option-card:hover {
    border-color: #aaa;
}

.shipping-option-card.selected {
    border-color: red;
    background-color: #f8f9fa;
}

.shipping-option-card input[type="radio"] {
    display: none;
}

.shipping-option-content {
    padding: 5px;
}

.shipping-option-content h4 {
    margin: 0 0 5px 0;
    color: black;
    font-size: 16px;
}

.shipping-option-content p {
    margin: 0;
    color: #666;
    font-size: 14px;
}

.coupon-section {
    margin: 20px 0;
    width: 40%;
    padding: 15px;
    border: 1px solid #eee;
    border-radius: 8px;
}

.coupon-input-group {
    display: flex;
    gap: 10px;
    margin: 10px 0;
}

.coupon-input-group input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.apply-coupon-btn {
    padding: 8px 15px;
    background-color: red;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.apply-coupon-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.coupon-message {
    margin-top: 5px;
    font-size: 14px;
}

.coupon-success {
    margin-top: 10px;
    color: #4CAF50;
    font-weight: bold;
}







    </style>

<style>
    .address-cards {
       display: flex;
       flex-direction: column;
       gap: 15px;
   }
   
   .address-card {
       display: flex;
       align-items: flex-start;
       gap: 15px;
       padding: 15px;
       border: 2px solid #ddd;
       border-radius: 8px;
       cursor: pointer;
       transition: all 0.3s ease;
   }
   
   .address-card:hover {
       border-color: #aaa;
   }
   
   .address-card.selected {
       border-color: red;
       background-color: #f8f9fa;
   }
   
   .address-card input[type="radio"] {
       margin-top: 5px;
   }
   
   .address-content {
       flex: 1;
   }
   
   .address-content h4 {
       margin: 0 0 5px 0;
       color: black;
   }
   
   .address-content p {
       margin: 3px 0;
       color: #666;
       font-size: 14px;
   }
   
   .modal-overlay {
       position: fixed;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background-color: rgba(0, 0, 0, 0.5);
       display: flex;
       justify-content: center;
       align-items: center;
       z-index: 1000;
   }
   
   .modal {
       background: white;
       border-radius: 8px;
       width: 90%;
       max-width: 500px;
       max-height: 90vh;
       overflow-y: auto;
   }
   
   .modal-header {
       padding: 15px 20px;
       border-bottom: 1px solid #eee;
       display: flex;
       justify-content: space-between;
       align-items: center;
   }
   
   .modal-body {
       padding: 20px;
   }
   
   .form-group {
       margin-bottom: 15px;
   }
   
   .form-group label {
       display: block;
       margin-bottom: 5px;
       font-weight: 500;
   }
   
   .form-group input {
       width: 100%;
       padding: 8px 10px;
       border: 1px solid #ddd;
       border-radius: 4px;
   }
   
   .modal-footer {
       display: flex;
       justify-content: flex-end;
       gap: 10px;
       padding-top: 15px;
       border-top: 1px solid #eee;
   }
   
   .btn-btn {
       padding: 8px 15px;
       border: none;
       border-radius: 4px;
       cursor: pointer;
   }
   
   .btn-btn[type="submit"] {
       background-color: red;
       color: white;
   }

   .remove-coupon-btn {
    padding: 8px 15px;
    background-color: red;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.remove-coupon-btn-small {
    padding: 4px 8px;
    background-color: red;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 10px;
    font-size: 12px;
}

.remove-coupon-btn:hover, .remove-coupon-btn-small:hover {
    background-color: red;
}



</style>


<%-include("../../views/partials/user/header")%>

<div class="checkout-header">
    <h1>CHECKOUT 1</h1>
</div>

<main class="checkout-main-content">
    <div class="checkout-container">
        <div class="checkout-form">
            <h2>Bill details</h2>
                        <!-- Display error message if it exists -->
                        <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
                            <div class="error-message" style="color: red;">
                                <%= errorMessage %>
                            </div>
                        <% } %>
            <div class="checkout-progress-bar">
                <div class="checkout-progress-item active">Shipping Method</div>
                <div class="checkout-progress-item">Payment Method</div>
                <div class="checkout-progress-item">Review</div>
            </div>
    
            <!-- Shipping Address Section -->
            <div class="shipping-address">
                <h3>Shipping Address</h3>
                <div class="address-cards">
                    <% if (addresses.length > 0) { %>
                        <% addresses.forEach((address, index) => { %>
                            <label class="address-card <%= address.isDefault ? 'selected' : '' %>">
                                <input 
                                    type="radio" 
                                    name="selectedAddress" 
                                    value="<%= address._id %>" 
                                    <%= address.isDefault ? 'checked' : '' %>
                                    onchange="selectAddress('<%= address._id %>', <%= JSON.stringify(address) %>)"
                                >
                                <div class="address-content">
                                    <h4><%= index === 0 ? 'Home' : index === 1 ? 'Office' : address.name %></h4>
                                    <p><%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.zip %>, <%= address.country %></p>
                                    <p><%= address.phone %></p>
                                    <p><%= address.email %></p>
                                </div>
                            </label>
                        <% }) %>
                    <% } else { %>
                        <p>No addresses found. Please add an address.</p>
                    <% } %>
                </div>
                <button class="checkout-btn" onclick="openAddressModal()">Add Address</button>
            </div>
    
           <!-- Shipping Method Section -->
<div class="shipping-methods">
    <h3>Select a Shipping Method</h3>
    <div class="shipping-options-container">
        <label class="shipping-option-card <%= (shippingMethod === 'Standard' || !shippingMethod) ? 'selected' : '' %>">
            <input type="radio" name="shipping" value="Standard" 
                   <%= (shippingMethod === 'Standard' || !shippingMethod) ? 'checked' : '' %>
                   onchange="updateShippingCost(100)">
            <div class="shipping-option-content">
                <h4>Standard - ₹100</h4>
                <p>Delivered in 8-12 business days</p>
            </div>
        </label>
        <label class="shipping-option-card <%= shippingMethod === 'Premium' ? 'selected' : '' %>">
            <input type="radio" name="shipping" value="Premium" 
                   <%= shippingMethod === 'Premium' ? 'checked' : '' %>
                   onchange="updateShippingCost(500)">
            <div class="shipping-option-content">
                <h4>Premium Ground - ₹500</h4>
                <p>Delivered in 4-7 business days</p>
            </div>
        </label>
    </div>
</div>


<!-- Coupon Section -->
<div class="coupon-section">
    <h3>Apply Coupon</h3>
    <div class="coupon-input-group">
        <input type="text" id="couponCode" placeholder="Enter coupon code" 
               value="<%= couponCode %>" <%= couponApplied ? 'disabled' : '' %>>
        <% if (couponApplied) { %>
            <button class="remove-coupon-btn" onclick="removeCoupon()">Remove</button>
        <% } else { %>
            <button class="apply-coupon-btn" onclick="applyCoupon()">Apply</button>
        <% } %>
    </div>
    <div id="couponMessage" class="coupon-message"></div>
    <% if (couponApplied) { %>
        <div class="coupon-success">
            Coupon applied! Discount: ₹<%= discountAmount.toFixed(2) %>
        </div>
    <% } %>
</div>



            <button class="checkout-btn" onclick="window.location.href='/cart'">Back</button>
            <button class="checkout-btn" onclick="proceedToCheckout2()">Continue</button>
        </div>
    
        <!-- Order Summary -->
        <div class="order-summary">
            <h2>Your order</h2>
            <div class="summary-item">
                <span>Subtotal</span>
                <span>₹<%= cartTotal %></span>
            </div>
            <div class="summary-item">
                <span>Shipping & Handling</span>
                <span id="shippingCost">₹100</span>
            </div>
            <div class="summary-item">
                <span style="<%= couponApplied ? 'color: red;' : '' %>">Coupon Discount</span>
                <span style="<%= couponApplied ? 'color: red;' : '' %>">-₹<%= discountAmount.toFixed(2) %></span>
            </div>
            <div class="summary-item total-row">
                <span>Total</span>
                <span id="totalAmount">₹<%= (cartTotal + shippingCost - discountAmount).toFixed(2) %></span>
            </div>
        </div>
    </div>
    
    <div id="addressModal" class="modal-overlay" style="display: none;">
        <div class="modal">
            <div class="modal-header">
                <h2>Add New Address</h2>
                <button class="close-btn" onclick="closeAddressModal()">&times;</button>
            </div>
            <div class="modal-body">
               <!-- Address Form (keep this part as is, without phone/email) -->
            <form id="addressForm" onsubmit="saveAddress(event)">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" name="name">
                </div>
                <div class="form-group">
                    <label>Street</label>
                    <input type="text" name="street" >
                </div>
                <div class="form-group">
                    <label>City</label>
                    <input type="text" name="city" >
                </div>
                <div class="form-group">
                    <label>State</label>
                    <input type="text" name="state">
                </div>
                <div class="form-group">
                    <label>Zip Code</label>
                    <input type="text" name="zip" maxlength="6">
                </div>
                <div class="form-group">
                    <label>Country</label>
                    <input type="text" name="country" >
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-btn" onclick="closeAddressModal()">Cancel</button>
                    <button type="submit" class="btn-btn">Save Address</button>
                </div>
            </form>
            </div>
        </div>
    </div>
</main>

<%-include("../../views/partials/user/footer")%>




<script>
    let selectedAddressId = null;
    let shippingCost = 100; // Default shipping cost
    const cartTotal = <%= cartTotal %>;

    // Address validation functions
    function validateName(name) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(name) && name.trim().length > 1;
    }

    function validateStreet(street) {
        return street.trim().length > 0;
    }

    function validateCity(city) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(city) && city.trim().length > 0;
    }

    function validateState(state) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(state) && state.trim().length > 0;
    }

    function validateZip(zip) {
        const regex = /^\d{6}$/;
        return regex.test(zip);
    }

    function validateCountry(country) {
        const regex = /^[a-zA-Z ]+$/;
        return regex.test(country) && country.trim().length > 0;
    }

    // Show validation error
    function showValidationError(field, message) {
        // Check if error element exists, if not create it
        let errorElement = document.getElementById(`${field}Error`);
        if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.id = `${field}Error`;
            errorElement.className = 'invalid-feedback';
            errorElement.style.color = 'red';
            errorElement.style.fontSize = '12px';
            errorElement.style.marginTop = '5px';
            
            // Insert after the input field
            const inputField = document.querySelector(`input[name="${field}"]`);
            if (inputField && inputField.parentNode) {
                inputField.parentNode.appendChild(errorElement);
            }
        }
        
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        document.querySelector(`input[name="${field}"]`).classList.add('is-invalid');
        document.querySelector(`input[name="${field}"]`).style.borderColor = 'red';
    }

    // Clear validation error
    function clearValidationError(field) {
        const errorElement = document.getElementById(`${field}Error`);
        if (errorElement) {
            errorElement.textContent = '';
            errorElement.style.display = 'none';
        }
        
        const inputField = document.querySelector(`input[name="${field}"]`);
        if (inputField) {
            inputField.classList.remove('is-invalid');
            inputField.style.borderColor = '';
        }
    }

    // Validate entire form
    function validateAddressForm(form) {
        let isValid = true;
        const formData = {
            name: form.name.value.trim(),
            street: form.street.value.trim(),
            city: form.city.value.trim(),
            state: form.state.value.trim(),
            zip: form.zip.value.trim(),
            country: form.country.value.trim()
        };

        // Validate name
        if (!validateName(formData.name)) {
            showValidationError('name', 'Name must contain only letters and be at least 2 characters long');
            isValid = false;
        } else {
            clearValidationError('name');
        }

        // Validate street
        if (!validateStreet(formData.street)) {
            showValidationError('street', 'Street address is required');
            isValid = false;
        } else {
            clearValidationError('street');
        }

        // Validate city
        if (!validateCity(formData.city)) {
            showValidationError('city', 'City must contain only letters');
            isValid = false;
        } else {
            clearValidationError('city');
        }

        // Validate state
        if (!validateState(formData.state)) {
            showValidationError('state', 'State must contain only letters');
            isValid = false;
        } else {
            clearValidationError('state');
        }

        // Validate zip
        if (!validateZip(formData.zip)) {
            showValidationError('zip', 'Zip code must be exactly 6 digits');
            isValid = false;
        } else {
            clearValidationError('zip');
        }

        // Validate country
        if (!validateCountry(formData.country)) {
            showValidationError('country', 'Country must contain only letters');
            isValid = false;
        } else {
            clearValidationError('country');
        }

        return isValid;
    }

    // Function to select an address
    function selectAddress(addressId, addressDetails) {
        // Store selected address in sessionStorage
        sessionStorage.setItem('selectedAddress', JSON.stringify(addressDetails));
        
        // Update the UI to reflect the selected address
        document.querySelectorAll('.address-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        const selectedCard = document.querySelector(`input[name="selectedAddress"][value="${addressId}"]`).parentElement;
        selectedCard.classList.add('selected');
    }

    // Function to update shipping cost
    function updateShippingCost(cost) {
        const selectedShippingMethod = document.querySelector('input[name="shipping"]:checked').value;
        
        // Update UI
        document.getElementById('shippingCost').textContent = `₹${cost}`;
        const cartTotal = <%= cartTotal %>;
        const discountAmount = <%= couponApplied ? discountAmount : 0 %>;
        const totalAmount = cartTotal + cost - discountAmount;
        document.getElementById('totalAmount').textContent = `₹${totalAmount}`;

        // Update selected state
        document.querySelectorAll('.shipping-option-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.querySelector(`input[name="shipping"]:checked`).parentElement.classList.add('selected');

        // Store in sessionStorage
        sessionStorage.setItem('selectedShippingMethod', selectedShippingMethod);
        sessionStorage.setItem('shippingCost', cost);
    }

    // Function to open the address modal
    function openAddressModal() {
        document.getElementById('addressModal').style.display = 'flex';
        document.getElementById('addressForm').reset();
    }

    // Function to close the address modal
    function closeAddressModal() {
        document.getElementById('addressModal').style.display = 'none';
    }

    // Function to save the address
    async function saveAddress(event) {
        event.preventDefault();
        const form = event.target;
        
        // First validate the form
        if (!validateAddressForm(form)) {
            return; // Stop form submission if validation fails
        }
        
        const formData = new FormData(form);
        const address = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/address/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(address),
            });

            const result = await response.json();

            if (result.success) {
                // Show success alert
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message || 'Address saved successfully',
                    timer: 1500,
                    showConfirmButton: false
                });
                
                // Close modal and refresh addresses
                closeAddressModal();
                window.location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to save address',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to save address. Please try again.',
            });
        }
    }

    // Function to proceed to checkout step 2
    async function proceedToCheckout2() {
        const selectedRadio = document.querySelector('input[name="selectedAddress"]:checked');
        const shippingMethod = document.querySelector('input[name="shipping"]:checked').value;
        const shippingCost = Number(sessionStorage.getItem('shippingCost')) || 100;
        
        if (!selectedRadio) {
            await Swal.fire({
                icon: 'warning',
                title: 'Address Required',
                text: 'Please select a shipping address to continue.',
                confirmButtonColor: '#4CAF50',
            });
            return;
        }

        try {
            const response = await fetch('/checkout1/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    selectedAddress: selectedRadio.value,
                    shippingMethod,
                    shippingCost,
                    couponCode: document.getElementById('couponCode').value || null,
                    discountAmount: <%= couponApplied ? discountAmount : 0 %>  
                }),
                credentials: 'include'
            });

            const result = await response.json();

            if (result.success) {
                window.location.href = '/checkout2';
            } else {
                throw new Error(result.message || 'Failed to proceed to checkout');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to proceed to checkout',
            });
        }
    }

    // Apply Coupon Function
    async function applyCoupon() {
        const couponCode = document.getElementById('couponCode').value.trim();
        const messageElement = document.getElementById('couponMessage');
        const cartTotal = <%= cartTotal %>;
        const shippingCost = 100; // Assuming a default shipping cost
        const totalAmount = cartTotal + shippingCost;

        if (!couponCode) {
            messageElement.textContent = 'Please enter a coupon code';
            messageElement.style.color = 'red';
            return;
        }

        try {
            messageElement.textContent = 'Validating coupon...';
            messageElement.style.color = 'blue';

            // Get the current shipping cost from the DOM
            const shippingCostText = document.getElementById('shippingCost').textContent;
            const shippingCost = Number(shippingCostText.replace('₹', '')) || 100;

            const response = await fetch('/validate-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    couponCode,
                    totalAmount: <%= cartTotal %> + shippingCost
                }),
                credentials: 'include'
            });

            const result = await response.json();

            if (result.valid) {
                // Show success message
                await Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied',
                    text: result.message,
                    timer: 2000,
                    showConfirmButton: false
                });
                
                // Reload to show applied coupon
                window.location.reload();
            } else {
                messageElement.textContent = result.message;
                messageElement.style.color = 'red';
            }
        } catch (error) {
            console.error('Error applying coupon:', error);
            messageElement.textContent = error.message || 'Failed to apply coupon';
            messageElement.style.color = 'red';
        }
    }

    async function removeCoupon() {
        try {
            const response = await fetch('/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (result.success) {
                // Show success message
                await Swal.fire({
                    icon: 'success',
                    title: 'Coupon Removed',
                    text: 'Coupon has been removed successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
                
                // Reload to update UI
                window.location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to remove coupon',
                });
            }
        } catch (error) {
            console.error('Error removing coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to remove coupon. Please try again.',
            });
        }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
        // Restore selected address
        const selectedAddress = JSON.parse(sessionStorage.getItem('selectedAddress'));
        if (selectedAddress) {
            const addressInput = document.querySelector(`input[name="selectedAddress"][value="${selectedAddress._id}"]`);
            if (addressInput) {
                addressInput.checked = true;
                selectAddress(selectedAddress._id, selectedAddress);
            }
        }

        // Restore shipping method with proper initialization
        const savedShippingMethod = sessionStorage.getItem('selectedShippingMethod') || 'Standard';
        const savedShippingCost = sessionStorage.getItem('shippingCost') || 100;
        
        // Set the radio button and UI
        const radio = document.querySelector(`input[name="shipping"][value="${savedShippingMethod}"]`);
        if (radio) {
            radio.checked = true;
            radio.parentElement.classList.add('selected');
            
            // Update cost display
            document.getElementById('shippingCost').textContent = `₹${savedShippingCost}`;
            
            // Update total amount
            const cartTotal = <%= cartTotal %>;
            const discountAmount = <%= couponApplied ? discountAmount : 0 %>;
            const totalAmount = cartTotal + Number(savedShippingCost) - discountAmount;
            document.getElementById('totalAmount').textContent = `₹${totalAmount}`;
        }

        // Ensure only one shipping method is selected
        document.querySelectorAll('.shipping-option-card').forEach(card => {
            card.classList.remove('selected');
        });
        if (radio) {
            radio.parentElement.classList.add('selected');
        }

        // Setup real-time validation for address form in checkout
        const addressForm = document.getElementById('addressForm');
        if (addressForm) {
            // Add input event listeners to all form fields
            const nameInput = addressForm.querySelector('input[name="name"]');
            const streetInput = addressForm.querySelector('input[name="street"]');
            const cityInput = addressForm.querySelector('input[name="city"]');
            const stateInput = addressForm.querySelector('input[name="state"]');
            const zipInput = addressForm.querySelector('input[name="zip"]');
            const countryInput = addressForm.querySelector('input[name="country"]');
            
            // Name validation
            if (nameInput) {
                nameInput.addEventListener('input', function() {
                    if (validateName(this.value.trim())) {
                        clearValidationError('name');
                    } else {
                        showValidationError('name', 'Name must contain only letters and be at least 2 characters long');
                    }
                });
            }

            // Street validation
            if (streetInput) {
                streetInput.addEventListener('input', function() {
                    if (validateStreet(this.value.trim())) {
                        clearValidationError('street');
                    } else {
                        showValidationError('street', 'Street address is required');
                    }
                });
            }

            // City validation
            if (cityInput) {
                cityInput.addEventListener('input', function() {
                    if (validateCity(this.value.trim())) {
                        clearValidationError('city');
                    } else {
                        showValidationError('city', 'City must contain only letters');
                    }
                });
            }

            // State validation
            if (stateInput) {
                stateInput.addEventListener('input', function() {
                    if (validateState(this.value.trim())) {
                        clearValidationError('state');
                    } else {
                        showValidationError('state', 'State must contain only letters');
                    }
                });
            }

            // Zip validation
            if (zipInput) {
                zipInput.addEventListener('input', function() {
                    if (validateZip(this.value.trim())) {
                        clearValidationError('zip');
                    } else {
                        showValidationError('zip', 'Zip code must be exactly 6 digits');
                    }
                });
            }

            // Country validation
            if (countryInput) {
                countryInput.addEventListener('input', function() {
                    if (validateCountry(this.value.trim())) {
                        clearValidationError('country');
                    } else {
                        showValidationError('country', 'Country must contain only letters');
                    }
                });
            }
        }
    });
</script>