<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/sneaky.png" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <title>SNEAKY</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
        }
        
        /* Container styles */
        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        /* Header styles */
        header {
            background: #000;
            padding: 20px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .logo {
    display: inline-flex;
    align-items: center;
    padding: 8px 16px;
    border-radius: 8px;
    text-decoration: none;
    color: white;
    font-weight: 800;
    letter-spacing: 1px;
    gap: 10px;
}

.logo-icon {
    width: 24px;
    height: 24px;
}

.logo-text {
    font-size: 20px;
}
        .nav-links {
            display: flex;
            gap: 30px;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            text-transform: uppercase;
            font-size: 14px;
        }

        .nav-icons {
            display: flex;
            gap: 20px;
        }

        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }
        
        /* Banner styles */
        .orders-banner {
            background-color: #000;
            color: white;
            padding: 50px 0;
            text-align: center;
        }
        
        .orders-banner h1 {
            font-size: 2.5rem;
            letter-spacing: 2px;
        }
        
        /* Order details section */
        .order-section {
            background-color: #fff;
            border-radius: 20px 20px 0 0;
            margin-top: -20px;
            padding: 50px 0;
        }
        
        .order-container {
            background: #fff;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
        }
        
        .order-header {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .order-id {
            font-size: 1.2rem;
            font-weight: bold;
            display: flex;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .pending-tag {
            background: yellow;
            color: #000000;
            padding: 5px 20px;
            border-radius: 5px;
            font-size: 0.8rem;
            margin-left: 10px;
        }
        
        .order-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .singleorder-btn {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }

        .cancel-item-btn{
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }
        .return-item-btn{
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }
        .item-action-btn{
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }
        
        /* .singleorder-btn primary {
            background-color: #ff0000;
            color: white;
            border: none;
        }
        
        .singleorder-btn secondary {
            background-color: #f8f9fa;
            color: #333;
            border: 1px solid #ddd;
        } */
        
        .order-details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .detail-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
        }
        
        .detail-card h3 {
            font-size: 1.1rem;
            margin-bottom: 15px;
            color: #555;
        }
        
        .detail-card p {
            margin-bottom: 5px;
            font-size: 0.95rem;
        }
        
        .view-profile {
            color: #ff0000;
            text-decoration: none;
            font-size: 0.9rem;
            display: inline-block;
            margin-top: 10px;
        }
        
        /* Products table */
        .products-table {
            width: 100%;
            border-collapse: collapse;

        }
        
        .products-table th {
            background: #f8f9fa;
            padding: 12px;
            text-align: left;
            font-weight: 600;
            color: #555;
        }
        
        .products-table td {
            padding: 15px 12px;
            border-top: 1px solid #eee;
        }
        
        .product-row {
            display: flex;
            align-items: center;
        }
        
        .product-img {
            width: 50px;
            height: 50px;
            margin-right: 15px;
            border-radius: 5px;
        }

        .status {
    padding: 5px 15px;
    border-radius: 5px;
    font-size: 0.9rem;
    font-weight: bold;
    text-align: center;
    display: inline-block;
    min-width: 80px;
}

.status.pending {
    background-color: #ffcc00;
    color: #000;
}

.status.shipped {
    background-color: #007bff;
    color: #fff;
}

.status.delivered {
    background-color: #28a745;
    color: #fff;
}

.status.cancelled {
    background-color: #dc3545;
    color: #fff;
}

        
        .text-right {
            text-align: right;
            margin-left: 80px;
        }
        .coupon-text-right {
            text-align: right;
            margin-left: 80px;
            color: red;
        }
        
        .total-row td {
            font-weight: bold;
            border-top: 2px solid #eee;
        }
        
        /* Payment info */
        .payment-info {
            margin-bottom: 30px;
        }
        
        .payment-info h3 {
            font-size: 1.1rem;
            margin-bottom: 10px;
            color: #555;
        }


.reason-section{
    background-color: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            margin: 15px 0; 
            border-left: 4px solid #dc3545;
}
.reason-section h3 {
    font-size: 1.1rem;
            margin-bottom: 10px;
            color: #555;
}
.cancelled-item {
    opacity: 0.7;
    background-color: #ffeeee;
}
.cancelled-item td {
    text-decoration: line-through;
    color: #ff4444;
}
.returned-item {
    opacity: 0.7;
    background-color: #eeffee;
}
.returned-item td {
    color: #44aa44;
}
.return-requested-item td {
    color: #fb8c00;
}

.order-summary {
    width: 100%;
    max-width: 400px;
    margin: 20px 0 20px auto;
    border-collapse: collapse;
}

.order-summary td {
    padding: 8px;
    border-bottom: 1px solid #eee;
    text-align: right;
}

.order-summary tr:last-child td {
    border-bottom: none;
}

.deduction {
    color: #e53935;
}

.grand-total {
    font-weight: bold;
    font-size: 1.1em;
    border-top: 2px solid #333;
}


.status-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        text-transform: capitalize;
    }
    .status-ordered { background-color: #fff3cd; color: #856404; }
    .status-processing { background-color: #cce5ff; color: #004085; }
    .status-shipped { background-color: #d4edda; color: #155724; }
    .status-delivered { background-color: #d1ecf1; color: #0c5460; }
    .status-cancelled { background-color: #f8d7da; color: #721c24; }
    .status-return-requested { background-color: #fff3cd; color: #856404; }
    .status-returned { background-color: #f8d7da; color: #721c24; }

    .status.ordered{ background-color: #17a2b8; }
        .status.processing { background-color: #ffc107; }
        .status.shipped { background-color: #6f42c1; }
        .status.delivered { background-color: #28a745; }
        .status.cancelled { background-color: #dc3545; }
        .status.return-requested { background-color: #fd7e14; }
        .status.returned { background-color: #6c757d; }
        
        .bottom-actions {
            display: flex;
        gap: 15px;
        margin-top: 30px;
        }
        
        /* Footer styles */
        footer {
            background: #000;
            color: white;
            padding: 60px 0 20px;
        }
        .footer-logo {
    display: inline-flex;
    align-items: center;
    padding: 6px 14px;
    border-radius: 8px;
    text-decoration: none;
    color: white;
    font-weight: 800;
    letter-spacing: 1px;
    gap: 8px;
    margin-bottom: 20px;
}

.footer-logo .logo-icon {
    width: 20px;
    height: 20px;
}

.footer-logo .logo-text {
    font-size: 18px;
}


        .footer-content {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 30px;
            margin-bottom: 40px;
        }

        .footer-links h3 {
            margin-bottom: 20px;
        }

        .footer-links ul {
            list-style: none;
        }

        .footer-links li {
            margin-bottom: 10px;
        }

        .footer-links a {
            color: #888;
            text-decoration: none;
        }

        .social-links {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .footer-bottom {
            text-align: center;
            padding-top: 20px;
            border-top: 1px solid #333;
        }
        
        .breadcrumb {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        .breadcrumb a {
            color: red;
            font-weight: bold;
        }


        /* Responsive styles */


        @media (max-width: 1024px) {

        .footer-content {
                grid-template-columns: repeat(2, 1fr);
            }
        }






        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
            }

            .logo {
        padding: 6px 12px;
    }
    
    .logo-icon {
        width: 20px;
        height: 20px;
    }
    
    .logo-text {
        font-size: 18px;
    }

            .nav-links {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: #000;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                gap: 20px;
            }
            .promo img {
            max-width: 200px; /* Even smaller on mobile */
        }

            .nav-links.active {
                display: flex;
            }            
            .order-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .order-actions {
                width: 100%;
            }
            
            .products-table {
                display: block;
                overflow-x: auto;
            }
            
            .footer-column {
                flex: 100%;
            }
        }
        
        /* Mobile menu icon */
        .menu-icon {
            display: none;
            font-size: 1.5rem;
        }
        
        @media (max-width: 768px) {
            .menu-icon {
                display: block;
            }

            .products-table thead {
        display: none;
    }

    .products-table tbody, 
    .products-table tr, 
    .products-table td {
        display: block;
        width: 100%;
    }

    .products-table td {
        text-align: right;
        padding-left: 50%;
        position: relative;
    }

    .products-table td::before {
        content: attr(data-label);
        position: absolute;
        left: 10px;
        font-weight: bold;
        text-align: left;
    }

    .product-row {
        flex-direction: column;
        align-items: flex-start;
    }








        }


        @media (max-width: 480px) {
        .logo {
        padding: 5px 10px;
    }
    
    .logo-icon {
        width: 18px;
        height: 18px;
    }
    
    .logo-text {
        font-size: 16px;
    }



    .footer-content {
                grid-template-columns: 1fr;
            }


        }

.detail-card{
    border: 1px solid red;
    border-radius: 10px;
}



    </style>
    <style>
        .payment-status-container {
            margin: 15px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .payment-status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.9rem;
        }
        
        .payment-status.payment-completed {
            background-color: #d4edda;
            color: #155724;
        }
        
        .payment-status.payment-failed {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .payment-status.payment-processing {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .repay-btn {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        .debug-info {
        color: #888;
        font-size: 0.8em;
        margin-top: 10px;
        display: block;
    }
    
    .swal2-popup {
        max-width: 500px !important;
    }
    tfoot tr {
    border-top: 2px solid #ddd;
}

tfoot .deduction {
    color: #e53935;
}

tfoot .total-row {
    font-weight: bold;
    font-size: 1.1em;
    border-top: 2px solid #333;

}

tfoot td {
    padding: 8px 0;
}
.cancelled-row {
    background-color: #ffeeee;
}
.cancelled-text {
    color: #d32f2f;
    font-weight: 500;
}
.cancelled-amount {
    color: #d32f2f;
    font-weight: bold;
}
/* In your CSS file */
.deduction {            
    color: #dc3545;
    font-weight: bold;
}

.deduction span:last-child::before {
    content: "-";
}

.cancelled-item {
    opacity: 0.6;
    background-color: #ffeeee;
}
.returned-item {
    opacity: 0.7;
    background-color: #eff5ff; /* Light blue background */
}

.item-reason {
            font-style: italic;
            color: #6c757d;
            font-size: 0.9em;
            margin-top: 5px;
        }


    </style>

</head>
<body>
    <%-include("../../views/partials/user/header")%>
    
    <!-- Orders Banner -->
    <section class="orders-banner">
        <div class="container">
            <h1>ORDERS</h1>
            <div class="breadcrumb">
                <a href="/orders">ORDERS</a> / <span><%= order.transactionId %></span>
            </div>
        </div>
    </section>
    
    <!-- Order Details Section -->
    <section class="order-section">
        <div class="container">
            <div class="order-container">
                <!-- Order Header -->
                <div class="order-header">
                    <div class="order-id">
                        Order ID: #<%= order.transactionId %>
                        <span class="status <%= order.status.toLowerCase() %>"><%= order.status %></span>
                    </div>
                    <% if (order.status === 'Payment Processing') { %>
                        <div class="payment-action-container">
                            <button class="repay-btn" onclick="retryPayment('<%= order._id %>')">
                                Retry Payment
                            </button>
                        </div>
                    <% } else { %>
                        <button class="singleorder-btn" onclick="downloadInvoice('<%= order._id %>')">
                            Download Invoice
                        </button>
                    <% } %>
                        </div>
                <!-- Order Details Grid -->
                <div class="order-details-grid">
                    <!-- Customer Details -->
                    <div class="detail-card">
                        <h3>Customer Details</h3>
                        <p><%= user.name %></p>
                        <p><%= user.email %></p>
                        <p><%= user.phone || 'No Phone' %></p>
                        <a href="/profile" class="view-profile">View Profile</a>
                    </div>
                    
                    <!-- Shipping Address -->
                    <div class="detail-card">
                        <h3>Shipping Address</h3>
                        <p><%= order.shippingAddress.name %></p>
                        <p><%= order.shippingAddress.street %></p>
                        <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %>, <%= order.shippingAddress.zip %></p>
                        <p><%= order.shippingAddress.country %></p>
                    </div>
                    
                    <!-- Order Details -->
                    <div class="detail-card">
                        <h3>Order Details</h3>
                        <p>Order ID: <%= order.transactionId %></p>
                        <p>Order Date: <%= order.createdAt.toLocaleDateString('en-GB', { day: 'numeric', month: 'numeric', year: 'numeric' }) %></p>
                        <p>Order Total: ₹<%= order.grandTotal %></p>
                    </div>
                </div>
                
                <!-- Products Table -->
<!-- Products Table (updated with item actions) -->
<table class="products-table">
    <thead>
        <tr>
            <th>Image</th>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Status</th>
            <th>Total</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <% order.items.forEach((item, index) => { %>
            <tr class="<%= item.status === 'Cancelled' ? 'cancelled-item' : '' %> <%= item.status === 'Returned' ? 'returned-item' : '' %>">
                <td>
                    <% if (item.product && item.product.productImage && item.product.productImage[0]) { %>
                        <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="product-img" />
                    <% } else { %>
                        <img src="/images/placeholder.jpg" alt="No image available" class="product-img" />
                    <% } %>
                </td>
                <td><%= item.product ? item.product.productName : 'Product Unavailable' %></td>
                <td>₹<%= item.price.toFixed(2) %></td>
                <td><%= item.quantity %></td>
                <td>
                    <span class="status <%= item.status.toLowerCase().replace(' ', '-') %>">
                        <%= item.status %>
                    </span>
                </td>
                <td class="item-total">₹<%= (item.price * item.quantity).toFixed(2) %></td>
                <td>
                    <% if (item.status !== 'Cancelled' && item.status !== 'Returned' && 
                          item.status !== 'Return Requested' && 
                          ['Ordered', 'Processing', 'Shipped','Pending'].includes(item.status)) { %>
                        <button class="cancel-item-btn" 
                                data-item-id="<%= item._id %>" 
                                data-product-name="<%= item.product ? item.product.productName : 'Product' %>">
                            Cancel
                        </button>
                    <% } else if (item.status === 'Delivered') { %>
                        <button class="return-item-btn" 
                                data-item-index="<%= index %>" 
                                data-product-name="<%= item.product ? item.product.productName : 'Product' %>">
                            Return
                        </button>
                    <% } %>
                </td>
            </tr>
            <% if (item.cancellationReason) { %>
                <tr>
                    <td colspan="7" class="item-reason">
                        <strong>Cancellation Reason:</strong> <%= item.cancellationReason %>
                    </td>
                </tr>
            <% } %>
            <% if (item.returnReason) { %>
                <tr>
                    <td colspan="7" class="item-reason">
                        <strong>Return Reason:</strong> <%= item.returnReason %>
                    </td>
                </tr>
            <% } %>
        <% }) %>
    </tbody>
    <tfoot>
        <% let cancelledAmount = 0; %>
        <% let returnedAmount = 0; %>
        
        <% order.items.forEach(item => { %>
            <% if (item.status === 'Cancelled') { %>
                <% cancelledAmount += (item.price * item.quantity); %>
            <% } else if (item.status === 'Returned') { %>
                <% returnedAmount += (item.price * item.quantity); %>
            <% } %>
        <% }); %>
        
        <tr>
            <td colspan="6" class="text-right">Sub Total:</td>
            <td class="text-right">₹<%= order.subtotal %></td>
        </tr>
        
        <% if (cancelledAmount > 0) { %>
            <tr class="deduction">
                <td colspan="6" class="text-right">Cancelled Items:</td>
                <td class="text-right">-₹<%= cancelledAmount.toFixed(2) %></td>
            </tr>
        <% } %>
        
        <% if (returnedAmount > 0) { %>
            <tr class="deduction">
                <td colspan="6" class="text-right">Returned Items:</td>
                <td class="text-right">-₹<%= returnedAmount.toFixed(2) %></td>
            </tr>
        <% } %>
        
        <tr>
            <td colspan="6" class="text-right">Shipping Cost:</td>
            <td class="text-right">₹<%= order.shippingCost %></td>
        </tr>
        
        <% if (order.discountAmount > 0) { %>
            <tr>
                <td colspan="6" class="text-right">Discount (<%= order.couponCode %>):</td>
                <td class="text-right">-₹<%= order.discountAmount %></td>
            </tr>
        <% } %>
        
        <tr class="total-row">
            <td colspan="6" class="text-right">Grand Total:</td>
            <td class="text-right">₹<%= order.grandTotal %></td>
        </tr>
    </tfoot>
</table>



<!-- Payment Info -->
<div class="payment-info">
    <h3>Payment Info</h3>
    <p><%= order.paymentMethod %></p>
</div>

<!-- Cancellation/Return Reason Section -->
<% if (order.status === 'Cancelled' && order.cancellationReason) { %>
    <div class="reason-section">
        <h3>Cancellation Reason</h3>
        <p><%= order.cancellationReason %></p>
    </div>
<% } %>

<% if ((order.status === 'Return Requested' || order.status === 'Returned') && order.returnReason) { %>
    <div class="reason-section">
        <h3>Return Reason</h3>
        <p><%= order.returnReason %></p>
    </div>
<% } %>

<!-- Bottom Actions -->
<div class="bottom-actions">
    <a href="/orders" class="singleorder-btn">Back</a>
    
    <% if (['Ordered', 'Processing', 'Shipped'].includes(order.status)) { %>
        <button class="singleorder-btn cancel-btn" id="cancelOrderBtn">Cancel Order</button>
    <% } else if (order.status === 'Delivered') { %>
        <button class="singleorder-btn return-btn" id="returnOrderBtn">Return Order</button>
    <% } %>
</div>
</div>
</div>
</section>
    
    <%-include("../../views/partials/user/footer")%>
    
    <script>
        // Cancel Order Functionality
        document.getElementById('cancelOrderBtn')?.addEventListener('click', function () {
            Swal.fire({
                title: 'Cancel Order',
                input: 'text',
                inputLabel: 'Reason for cancellation (required):',
                inputPlaceholder: 'Enter your reason here...',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Reason for cancellation is required.';
                    }
                },
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel',
                preConfirm: (reason) => {
                    return fetch(`/cancel-order`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId: '<%= order._id %>', reason }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to cancel order.');
                        }
                        return data;
                    })
                    .catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error.message}`);
                    });
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Cancelled',
                        text: result.value.message || 'Your order has been cancelled successfully.',
                    }).then(() => {
                        window.location.reload();
                    });
                }
            });
        });

        // Return Order Functionality
        document.getElementById('returnOrderBtn')?.addEventListener('click', function () {
            Swal.fire({
                title: 'Return Order',
                input: 'text',
                inputLabel: 'Reason for return (mandatory):',
                inputPlaceholder: 'Enter your reason here...',
                inputValidator: (value) => {
                    if (!value || value.trim().length < 10) {
                        return 'Please provide a detailed reason (at least 10 characters).';
                    }
                },
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel',
                preConfirm: (reason) => {
                    return fetch('/return-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId: '<%= order._id %>', reason }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to submit return request.');
                        }
                        return data;
                    })
                    .catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error.message}`);
                    });
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Return Request Submitted',
                        text: result.value.message || 'Your return request has been submitted successfully.',
                    }).then(() => {
                        window.location.reload();
                    });
                }
            });
        });

        // Cancel Item Functionality
        document.querySelectorAll('.cancel-item-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                const productName = this.getAttribute('data-product-name');
                
                Swal.fire({
                    title: `Cancel ${productName}`,
                    html: `
                        <p>You are about to cancel this item from your order.</p>
                        <textarea id="cancelReason" class="swal2-textarea" 
                            placeholder="Please enter reason for cancellation (required)" required></textarea>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Submit Cancellation',
                    preConfirm: () => {
                        const reason = document.getElementById('cancelReason').value;
                        if (!reason) {
                            Swal.showValidationMessage('Reason is required');
                            return false;
                        }
                        return { reason };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/cancel-order-item', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                orderId: '<%= order._id %>',
                                itemId: itemId,
                                reason: result.value.reason
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Item Cancelled',
                                    html: `
                                        <p>${data.message}</p>
                                        ${data.refundAmount ? 
                                            `<p>₹${data.refundAmount} has been refunded to your wallet.</p>` : ''}
                                    `,
                                    willClose: () => location.reload()
                                });
                            } else {
                                throw new Error(data.message);
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error', error.message, 'error');
                        });
                    }
                });
            });
        });

        // Return Item Functionality
        document.querySelectorAll('.return-item-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemIndex = this.getAttribute('data-item-index');
                const productName = this.getAttribute('data-product-name');
                
                Swal.fire({
                    title: `Return ${productName}`,
                    html: `
                        <p>You are about to request return for this item.</p>
                        <textarea id="returnReason" class="swal2-textarea" 
                            placeholder="Please enter reason for return (required)" required></textarea>
                    `,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Submit Return Request',
                    preConfirm: () => {
                        const reason = document.getElementById('returnReason').value;
                        if (!reason || reason.trim().length < 10) {
                            Swal.showValidationMessage('Please provide a detailed reason (at least 10 characters)');
                            return false;
                        }
                        return { reason };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/return-order-item', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                orderId: '<%= order._id %>',
                                itemIndex: itemIndex,
                                reason: result.value.reason
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Return Requested',
                                    html: `
                                        <p>${data.message}</p>
                                        <p>Admin will verify your request.</p>
                                    `,
                                    willClose: () => location.reload()
                                });
                            } else {
                                throw new Error(data.message);
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error', error.message, 'error');
                        });
                    }
                });
            });
        });

        function downloadInvoice(orderId) {
            window.location.href = `/download-invoice/${orderId}`;
        }

        // Retry payment function
        async function retryPayment(orderId) {
            try {
                const swalInstance = Swal.fire({
                    title: 'Processing Payment',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                // Call retry endpoint
                const response = await fetch(`/retry-payment/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include'
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Payment failed');
                }

                swalInstance.close();

                const options = {
                    key: data.key,
                    amount: Math.round(data.totalAmount * 100),
                    currency: 'INR',
                    name: "SNEAKY",
                    description: `Order #${orderId}`,
                    order_id: data.razorpayOrderId,
                    handler: function(response) {
                        verifyRetryPayment(response, orderId);
                    },
                    modal: {
                        ondismiss: function() {
                            window.location.href = `/order-failed/${orderId}`;
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone || "" %>'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Error',
                    text: error.message
                });
                console.error('Payment Error:', error);
            }
        }

        async function verifyRetryPayment(response, orderId) {
            try {
                Swal.fire({
                    title: 'Verifying Payment',
                    html: 'Please wait...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                const verificationResponse = await fetch('/verify-retry-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature,
                        orderId: orderId
                    }),
                    credentials: 'include'
                });

                const data = await verificationResponse.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Verification failed');
                }

                window.location.href = `/order-success/${orderId}`;

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Verification Failed',
                    text: error.message
                });
                console.error('Verification Error:', error);
                window.location.href = `/order-failed/${orderId}`;
            }
        }  
    </script>
</body>
</html>