<%- include("../../views/partials/user/header") %>

<!-- Hero Section -->
<section class="shop-hero">
    <div class="shop-hero-content">
        <h1>SHOP</h1>
        <div class="breadcrumb">
            <a href="/">HOME</a> / <span>SHOP</span>
        </div>
    </div>
    <div class="hero-wave"></div>
</section>

<!-- Shop Content -->
<div class="shop-container">
    <aside class="shop-sidebar">
        <button  class="filter-button"  onclick="clearFilters()">Clear Filters</button>
        <!-- Categories Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h4>CATEGORIES</h4>
                <button class="toggle-filter"><i class="fas fa-chevron-up"></i></button>
            </div>
            <div class="filter-options" id="category-filters">
                <% if (categories.length > 0) { %>
                    <% categories.forEach(category => { %>
                        <% if (category.isListed && !category.isDeleted) { %>
                            <label class="filter-option">
                                <input 
                                    type="checkbox" 
                                    name="category" 
                                    value="<%= category._id %>" 
                                    onchange="filterProducts()"
                                    <%= selectedCategory === category._id.toString() ? 'checked' : '' %>
                                >
                                <%= category.name %>
                            </label>
                        <% } %>
                    <% }) %>
                <% } else { %>
                    <p>No categories found.</p>
                <% } %>
            </div>
        </div>

        <!-- Price Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h4>PRICE</h4>
                <button class="toggle-filter"><i class="fas fa-chevron-up"></i></button>
            </div>
            <div class="filter-options">
                <div class="price-range">
                    <div class="range-inputs">
                        <input type="text" placeholder="Min" value="₹0">
                        <input type="text" placeholder="Max" value="₹5000">
                    </div>
                    <button class="apply-button" onclick="filterProducts()">Apply</button>
                </div>
            </div>
        </div>

        <!-- Size Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h4>SIZE</h4>
                <button class="toggle-filter"><i class="fas fa-chevron-up"></i></button>
            </div>
            <div class="filter-options" id="size-filters">
                <div class="size-options">
                    <% const sizes = ['7', '8', '9', '10']; %>
                    <% sizes.forEach(size => { %>
                        <button 
                            class="size-option" 
                            data-size="<%= size %>" 
                            onclick="toggleSizeFilter('<%= size %>')"
                        >
                            <%= size %>
                        </button>
                    <% }) %>
                </div>
            </div>
        </div>
    </aside>

    <div class="products-container">
        <div class="products-header">
            <h3><%= totalProducts %> items found</h3>
            <div class="products-view-options">
                <select class="sort-select">
                    <option>Best match</option>
                </select>
            </div>
        </div>

        <!-- Product Grid -->
        <div class="products-grid" id="products-grid">
            <% if (products.length > 0) { %>
                <% products.forEach(product => { %>
                    <div class="product-card" data-category="<%= product.category._id || product.category %>" data-sizes="<%= product.sizes ? product.sizes.map(size => size.size).join(',') : '' %>">
                        <a href="/product/<%= product._id %>" class="product-image">
                            <img src="<%= product.productImage[0] %>" alt="<%= product.productName %>">
                        </a>
                        <div class="product-info">
                            <div class="product-price">
                                <% if (product.offerPrice && product.offerPrice > 0 && product.offerPrice !== product.price) { %>
                                    <span class="offer-price">₹<%= product.offerPrice %></span>
                                    <span class="original-price">₹<%= product.price %></span>
                                <% } else { %>
                                    <span class="current-price">₹<%= product.price %></span>
                                <% } %>
                            </div>
                            <h4 class="product-name"><%= product.productName %></h4>
                            <div class="product-actions">
                            <!-- Add to Cart Button -->
                            <button class="add-to-cart-btn" onclick="addToCart('<%= product._id %>', '<%= product.sizes && product.sizes[0] ? product.sizes[0].size : "7" %>')">
                                Add to cart
                            </button>
                            <!-- Add to Wishlist Button -->
                            <button class="add-to-wishlist" data-product-id="<%= product._id %>" onclick="toggleWishlist('<%= product._id %>')">
                                <i class="far fa-heart"></i>
                            </button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <p>No products found.</p>
            <% } %>
        </div>

        <!-- Pagination -->
        <div class="pagination">
            <span class="pagination-info">Showing <%= (currentPage - 1) * 6 + 1 %> to <%= Math.min(currentPage * 6, totalProducts) %> of <%= totalProducts %> entries</span>
            <div class="pagination-controls">
                <% if (currentPage > 1) { %>
                    <a href="/shop?page=<%= currentPage - 1 %>" class="pagination-prev">Previous</a>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <a href="/shop?page=<%= i %>" class="page-number <%= i === currentPage ? 'active' : '' %>"><%= i %></a>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <a href="/shop?page=<%= currentPage + 1 %>" class="pagination-next">Next</a>
                <% } %>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to filter products based on selected categories and sizes
    function filterProducts() {
        const selectedCategories = Array.from(document.querySelectorAll('#category-filters input:checked')).map(input => input.value);
        const selectedSizes = Array.from(document.querySelectorAll('#size-filters .size-option.active')).map(button => button.getAttribute('data-size'));
        const productCards = document.querySelectorAll('.product-card');

        let visibleProductsCount = 0;

        // Build the new URL with the applied filters
        const url = new URL(window.location.href);
        url.searchParams.delete('category'); // Remove existing category filter
        url.searchParams.delete('size'); // Remove existing size filter

        // Add selected filters to the URL
        if (selectedCategories.length > 0) {
            url.searchParams.set('category', selectedCategories.join(','));
        }
        if (selectedSizes.length > 0) {
            url.searchParams.set('size', selectedSizes.join(','));
        }

        // Update the URL without reloading the page
        window.history.pushState({}, '', url);

        // Apply the filters to the products
        productCards.forEach(card => {
            const category = card.getAttribute('data-category');
            const sizes = card.getAttribute('data-sizes').split(',');

            const matchesCategory = selectedCategories.length === 0 || selectedCategories.includes(category);
            const matchesSize = selectedSizes.length === 0 || selectedSizes.some(size => sizes.includes(size));

            if (matchesCategory && matchesSize) {
                card.style.display = 'block';
                visibleProductsCount++;
            } else {
                card.style.display = 'none';
            }
        });

        // Update the total products count displayed above the grid
        const totalProductsHeader = document.querySelector('.products-header h3');
        if (totalProductsHeader) {
            totalProductsHeader.textContent = `${visibleProductsCount} items found`;
        }
    }

    // Function to toggle size filter
    function toggleSizeFilter(size) {
        const sizeButton = document.querySelector(`#size-filters .size-option[data-size="${size}"]`);
        sizeButton.classList.toggle('active');
        filterProducts();
    }

    // Function to read URL parameters and apply filters on page load
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);

        // Apply category filter
        const selectedCategory = urlParams.get('category');
        if (selectedCategory) {
            selectedCategory.split(',').forEach(categoryId => {
                const categoryCheckbox = document.querySelector(`#category-filters input[value="${categoryId}"]`);
                if (categoryCheckbox) {
                    categoryCheckbox.checked = true;
                }
            });
        }

        // Apply size filter
        const selectedSizes = urlParams.get('size');
        if (selectedSizes) {
            selectedSizes.split(',').forEach(size => {
                const sizeButton = document.querySelector(`#size-filters .size-option[data-size="${size}"]`);
                if (sizeButton) {
                    sizeButton.classList.add('active');
                }
            });
        }

        // Apply the filters
        filterProducts();
    });

    // Function to clear all filters
    function clearFilters() {
        // Clear the URL
        const url = new URL(window.location.href);
        url.searchParams.delete('category');
        url.searchParams.delete('size');
        window.history.pushState({}, '', url);

        // Uncheck all category checkboxes
        document.querySelectorAll('#category-filters input:checked').forEach(checkbox => {
            checkbox.checked = false;
        });

        // Remove active class from all size buttons
        document.querySelectorAll('#size-filters .size-option.active').forEach(button => {
            button.classList.remove('active');
        });

        // Apply the filters (which will now show all products)
        filterProducts();
    }



    // Function to handle "Add to Cart" button click
    document.querySelectorAll('.add-to-cart').forEach(button => {
        button.addEventListener('click', async function () {
            const productId = this.getAttribute('data-product-id');

            // Check if the user is logged in
            const isLoggedIn = <%= user ? true : false %>; // Use the user object passed from the controller

            if (!isLoggedIn) {
                // Redirect to the signin page with the current page as the redirect URL
                window.location.href = '/signin?redirect=' + encodeURIComponent(window.location.pathname);
                return;
            }

            // Add the product to the cart
            try {
                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId }), // Only send productId
                });

                const result = await response.json();

                if (result.success) {
                    // Show SweetAlert for "Added to Cart"
                    Swal.fire({
                        icon: 'success',
                        title: 'Added to Cart!',
                        text: 'The product has been added to your cart.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: result.message || 'Failed to add the product to the cart.',
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong!',
                });
            }
        });
    });


    async function addToCart(productId, size) {
        try {
            const response = await fetch('/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, size }),
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Added to Cart!',
                    text: 'The product has been added to your cart.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message || 'Failed to add to cart.',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
            });
        }
    }
    
    // Function to update wishlist heart icons
    async function updateWishlistIcons() {
        try {
            const response = await fetch('/wishlist/status');
            const result = await response.json();

            if (result.success) {
                result.wishlistItems.forEach(productId => {
                    const wishlistButton = document.querySelector(`.add-to-wishlist[data-product-id="${productId}"]`);
                    if (wishlistButton) {
                        const heartIcon = wishlistButton.querySelector('i');
                        heartIcon.classList.remove('far'); // Remove outline heart
                        heartIcon.classList.add('fas'); // Add filled heart
                    }
                });
            }
        } catch (error) {
            console.error('Error updating wishlist icons:', error);
        }
    }

    // Update wishlist icons when the page loads
    document.addEventListener('DOMContentLoaded', updateWishlistIcons);

    // Function to handle "Add to Wishlist" button click
// Function to handle "Add to Wishlist" button click
document.querySelectorAll('.add-to-wishlist').forEach(button => {
    button.addEventListener('click', async function () {
        const productId = this.getAttribute('data-product-id');
        const productSize = this.getAttribute('data-product-size'); // Ensure size is included

        // Check if the user is logged in
        const isLoggedIn = <%= user ? true : false %>; // Use the user object passed from the controller

        if (!isLoggedIn) {
            // Redirect to the signin page with the current page as the redirect URL
            window.location.href = '/signin?redirect=' + encodeURIComponent(window.location.pathname);
            return;
        }

        // Toggle the product in the wishlist
        try {
            const response = await fetch('/wishlist/toggle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, size: productSize }), // Ensure size is included
            });

            const result = await response.json();

            if (result.success) {
                // Toggle the heart icon
                const heartIcon = this.querySelector('i');
                heartIcon.classList.toggle('far'); // Outline heart
                heartIcon.classList.toggle('fas'); // Filled heart

                // Show SweetAlert for "Added to Wishlist" or "Removed from Wishlist"
                Swal.fire({
                    icon: 'success',
                    title: result.message,
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message || 'Failed to update the wishlist.',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
            });
        }
    });
});

 // Toggle Wishlist Function
 async function toggleWishlist(productId) {
        try {
            const response = await fetch('/wishlist/toggle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId }),
            });

            const result = await response.json();

            if (result.success) {
                // Toggle the heart icon
                const heartIcon = document.querySelector(`.add-to-wishlist[data-product-id="${productId}"] i`);
                heartIcon.classList.toggle('far'); // Outline heart
                heartIcon.classList.toggle('fas'); // Filled heart

                // Show SweetAlert for "Added to Wishlist" or "Removed from Wishlist"
                Swal.fire({
                    icon: 'success',
                    title: result.message,
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message || 'Failed to update the wishlist.',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
            });
        }
    }







</script>

<style>
    .add-to-wishlist i.fas {
    color: red; 
}

.add-to-wishlist i.far {
    color: black; 
}
</style>

<%- include("../../views/partials/user/footer") %>