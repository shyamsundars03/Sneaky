<style>
            .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            width: 100%;
            padding: 8px;
            border-radius: 4px;

        }
        .search-box {

            /* background-color: red;
            border: none;
            color: white;
            border-radius: 4px;
            transition: background-color 0.3s;
            cursor: pointer;
            margin-bottom: 10px; */
            border: none;
            width: 163%;
            height: 30px;
            padding: 4px;
            border-radius: 4px;
        }


/* Category offer badges */
.category-offer-badge {
    display: inline-block;
    background: #28a745;
    color: white;
    font-size: 12px;
    padding: 2px 6px;
    border-radius: 4px;
    margin-left: 8px;
    font-weight: bold;
}

.category-offer-tag {
    display: inline-block;
    background: #f8f9fa;
    color: #28a745;
    font-size: 14px;
    padding: 4px 8px;
    border-radius: 4px;
    margin-left: 10px;
    font-weight: bold;
    border: 1px solid #28a745;
}

#hoome{
    cursor: pointer;
}


</style>

<%- include("../../views/partials/user/header") %>

<!-- Hero Section -->
<section class="shop-hero">
    <div class="shop-hero-content">
        <h1>SHOP</h1>
        <div class="breadcrumb">
            <a id="hoome" href="/">HOME</a> / <span>SHOP</span>
        </div>
    </div>
    <div class="hero-wave"></div>
</section>

<!-- Shop Content -->
<div class="shop-container">
    <aside class="shop-sidebar">
        <div class="header-actions">
            <form id="searchForm" onsubmit="updateFilters(); return false;">
                <input 
                    type="text" 
                    class="search-box" 
                    id="searchBox" 
                    placeholder="Search Products by Name" 
                    value="<%= searchTerm %>"
                    oninput="handleSearchInput()"
                >
            </form>
        </div>

        <button class="filter-button" onclick="clearFilters()">Clear Filters</button>
        
        <!-- Categories Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h4>CATEGORIES</h4>
                <button class="toggle-filter"><i class="fas fa-chevron-up"></i></button>
            </div>
            <div class="filter-options" id="category-filters">
                <% if (categories.length > 0) { %>
                    <% categories.forEach(category => { %>
                        <% if (category.isListed && !category.isDeleted) { %>
                            <label class="filter-option">
                                <input 
                                    type="checkbox" 
                                    name="category" 
                                    value="<%= category._id %>" 
                                    onchange="updateFilters()"
                                    <%= selectedCategory.includes(category._id.toString()) ? 'checked' : '' %>
                                >
                                <%= category.name %>
                            </label>
                        <% } %>
                    <% }) %>
                <% } else { %>
                    <p>No categories found.</p>
                <% } %>
            </div>
        </div>

        <!-- Price Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h4>PRICE</h4>
                <button class="toggle-filter"><i class="fas fa-chevron-up"></i></button>
            </div>
            <div class="filter-options">
                <div class="price-range">
                    <div class="range-inputs">
                        <input type="number" placeholder="Min" value="<%= minPrice %>" onchange="updateFilters()">
                        <input type="number" placeholder="Max" value="<%= maxPrice %>" onchange="updateFilters()">
                    </div>
                    <button class="apply-button" onclick="updateFilters()">Apply</button>
                </div>
            </div>
        </div>

        <!-- Size Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h4>SIZE</h4>
                <button class="toggle-filter"><i class="fas fa-chevron-up"></i></button>
            </div>
            <div class="filter-options" id="size-filters">
                <div class="size-options">
                    <% const sizes = ['7', '8', '9', '10']; %>
                    <% sizes.forEach(size => { %>
                        <button 
                            class="size-option <%= selectedSizes.includes(size) ? 'active' : '' %>" 
                            data-size="<%= size %>" 
                            onclick="toggleSizeFilter('<%= size %>')"
                        >
                            <%= size %>
                        </button>
                    <% }) %>
                </div>
            </div>
        </div>
    </aside>

    <div class="products-container">
        <div class="products-header">
            <h3><%= totalProducts %> items found</h3>
            <div class="products-view-options">
                <select class="sort-select" onchange="updateFilters()">
                    <option value="bestMatch" <%= sortOption === 'bestMatch' ? 'selected' : '' %>>Best match</option>
                    <option value="nameAsc" <%= sortOption === 'nameAsc' ? 'selected' : '' %>>Name (A-Z)</option>
                    <option value="nameDesc" <%= sortOption === 'nameDesc' ? 'selected' : '' %>>Name (Z-A)</option>
                    <option value="priceLow" <%= sortOption === 'priceLow' ? 'selected' : '' %>>Price (Low to High)</option>
                    <option value="priceHigh" <%= sortOption === 'priceHigh' ? 'selected' : '' %>>Price (High to Low)</option>
                </select>
            </div>
        </div>

        <!-- Product Grid -->
        <div class="products-grid" id="products-grid">
            <% if (products.length > 0) { %>
                <% products.forEach(product => { %>
                    <div class="product-card">
                        <a href="/product/<%= product._id %>" class="product-image">
                            <img src="<%= product.productImage[0] %>" alt="<%= product.productName %>">
                        </a>
                        <div class="product-info">
                            <div class="product-price">
                                <% if (product.finalPrice < product.price) { %>
                                    <span class="offer-price">₹<%= product.finalPrice %></span>
                                    <span class="original-price">₹<%= product.price %></span>
                                    <% if (product.hasCategoryOffer) { %>
                                        <span class="category-offer-badge">Category Offer</span>
                                    <% } %>
                                <% } else { %>
                                    <span class="current-price">₹<%= product.price %></span>
                                <% } %>
                            </div>
                            <h4 class="product-name"><%= product.productName %></h4>
                            <div class="product-actions">
                                <button class="add-to-cart-btn" onclick="addToCart('<%= product._id %>', '<%= product.sizes && product.sizes[0] ? product.sizes[0].size : "7" %>')">
                                    Add to cart
                                </button>
                                <button class="add-to-wishlist" data-product-id="<%= product._id %>" onclick="toggleWishlist('<%= product._id %>')">
                                    <i class="far fa-heart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <p>No products found.</p>
            <% } %>
        </div>

        <!-- Pagination -->
        <div class="pagination">
            <span class="pagination-info">Showing <%= (currentPage - 1) * 6 + 1 %> to <%= Math.min(currentPage * 6, totalProducts) %> of <%= totalProducts %> entries</span>
            <div class="pagination-controls">
                <% if (currentPage > 1) { %>
                    <a href="/shop?<%= buildQueryString({ ...queryParams, page: currentPage - 1 }) %>" class="pagination-prev">Previous</a>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <a href="/shop?<%= buildQueryString({ ...queryParams, page: i }) %>" class="page-number <%= i === currentPage ? 'active' : '' %>"><%= i %></a>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <a href="/shop?<%= buildQueryString({ ...queryParams, page: currentPage + 1 }) %>" class="pagination-next">Next</a>
                <% } %>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to toggle size filter
    function toggleSizeFilter(size) {
        const sizeButton = document.querySelector(`#size-filters .size-option[data-size="${size}"]`);
        sizeButton.classList.toggle('active');
        updateFilters();
    }

    // Function to update filters and reload page
    function updateFilters() {
        const selectedCategories = Array.from(document.querySelectorAll('#category-filters input:checked')).map(input => input.value);
        const selectedSizes = Array.from(document.querySelectorAll('#size-filters .size-option.active')).map(button => button.getAttribute('data-size'));
        const minPrice = document.querySelector('.price-range input[placeholder="Min"]').value;
        const maxPrice = document.querySelector('.price-range input[placeholder="Max"]').value;
        const searchTerm = document.getElementById('searchBox').value.trim();
        const sortOption = document.querySelector('.sort-select').value;

        // Build new URL
        const url = new URL('/shop', window.location.origin);
        
        // Add filters to URL
        if (selectedCategories.length > 0) {
            url.searchParams.set('category', selectedCategories.join(','));
        }
        if (selectedSizes.length > 0) {
            url.searchParams.set('size', selectedSizes.join(','));
        }
        if (minPrice) {
            url.searchParams.set('minPrice', minPrice);
        }
        if (maxPrice) {
            url.searchParams.set('maxPrice', maxPrice);
        }
        if (searchTerm) {
            url.searchParams.set('search', searchTerm);
        }
        if (sortOption !== 'bestMatch') {
            url.searchParams.set('sort', sortOption);
        }
        
        // Reload page with new filters
        window.location.href = url.toString();
    }

    // Function to clear all filters
    function clearFilters() {
        window.location.href = '/shop';
    }

    // Debounce for search input
    let searchTimer;
    document.getElementById('searchBox').addEventListener('input', function() {
        clearTimeout(searchTimer);
        searchTimer = setTimeout(updateFilters, 500);
    });

    // Add to cart function
    async function addToCart(productId, size) {
    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, size }),
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Added to Cart!',
                text: 'The product has been added to your cart.',
            });
        } else {
            // Handle specific cases like unlisted products
            if (result.error === 'PRODUCT_NOT_FOUND' || result.error === 'PRODUCT_UNLISTED') {
                Swal.fire({
                    icon: 'error',
                    title: 'Product Unavailable',
                    text: 'This product cannot be added to cart because it is not available or not found.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message || 'Failed to add to cart.',
                });
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
        });
    }
}

    // Wishlist functions
    async function toggleWishlist(productId) {
    try {
        const response = await fetch('/wishlist/toggle', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId }),
        });

        const result = await response.json();

        if (result.success) {
            const heartIcon = document.querySelector(`.add-to-wishlist[data-product-id="${productId}"] i`);
            if (heartIcon) {
                heartIcon.classList.toggle('far');
                heartIcon.classList.toggle('fas');
            }
            
            await Swal.fire({
                icon: 'success',
                title: result.message,
                timer: 1500, 
                showConfirmButton: false
            });
        } else {
            // Handle specific cases like unlisted products
            if (result.error === 'PRODUCT_NOT_FOUND' || result.error === 'PRODUCT_UNLISTED') {
                Swal.fire({
                    icon: 'error',
                    title: 'Product Unavailable',
                    text: 'Cannot add to wishlist because the product is not available or not found.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message || 'Failed to update wishlist.',
                });
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
        });
    }
}

    // Initialize wishlist icons
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch('/wishlist/status');
            const result = await response.json();

            if (result.success) {
                result.wishlistItems.forEach(productId => {
                    const heartIcon = document.querySelector(`.add-to-wishlist[data-product-id="${productId}"] i`);
                    if (heartIcon) {
                        heartIcon.classList.remove('far');
                        heartIcon.classList.add('fas');
                    }
                });
            }
        } catch (error) {
            console.error('Error initializing wishlist:', error);
        }
    });


// Add this function for search input handling
function handleSearchInput() {
    clearTimeout(searchTimer);
    searchTimer = setTimeout(() => {
        updateFilters();
    }, 500);
}

















</script>

<style>
    .add-to-wishlist i.fas {
        color: red; 
    }
    .add-to-wishlist i.far {
        color: black; 
    }
    .size-option.active {
        background-color: #333;
        color: white;
    }
</style>

<%- include("../../views/partials/user/footer") %>