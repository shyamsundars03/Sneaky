<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/sneaky.png" type="image/png">
    <title>Sneaky - Coupon Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, system-ui, sans-serif;
        }

        :root {
            --primary-color: #ff0000;
            --text-color: #333;
            --border-color: #e1e1e1;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        body {
            background-color: #f8f9fa;
        }

        /* Header Styles */
        header {
            background: #000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .sign-out {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        /* Hero Section */
        .hero {
            background: #000;
            color: white;
            padding: 4rem 2rem;
            position: relative;
        }

        .hero h1 {
            text-align: center;
            font-size: 2.5rem;
        }

        .wave {
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 50px;
            background: white;
            border-radius: 100% 100% 0 0;
        }

        /* Main Content */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .search-box {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            width: 300px;
        }

        .add-coupon {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            border: none;
            cursor: pointer;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #666;
        }

        td {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
        }

        .active {
            background: var(--primary-color);
            color: white;
        }

        .expired {
            background: #6c757d;
            color: white;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background: white;
            cursor: pointer;
        }

        .action-btn:hover {
            background: #f8f9fa;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding: 1rem 0;
        }

        .pagination-info {
            color: #666;
        }

        .pagination-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .page-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .page-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* Modal Styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
            padding: 2rem;
        }

        .modal {
            background: white;
            max-width: 600px;

            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            position: relative;
            z-index: 1001;
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .modal-body {
            padding: 1.2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            font-weight: 500;
            color: #333;
        }

        .form-input {
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        textarea.form-input {
            min-height: 100px;
            resize: vertical;
        }

        .radio-group {
            display: flex;
            gap: 1.5rem;
        }

        .radio-option {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        /* Confirmation Dialog */
        .confirm-dialog {
            background: white;
            max-width: 400px;
            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .confirm-body {
            padding: 2rem;
            text-align: center;
        }

        .confirm-title {
            font-size: 1.25rem;
            margin-bottom: 1rem;
        }

        .confirm-message {
            color: #666;
            margin-bottom: 1.5rem;
        }

        .confirm-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

        /* Alert Styles */
        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .form-error {
            color: var(--danger-color);
            font-size: 0.85rem;
            margin-top: 0.25rem;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-links {
                gap: 1rem;
            }

            .search-box {
                width: 200px;
            }
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .header-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .search-box {
                width: 100%;
            }

            .table-container {
                margin: 0 -1rem;
            }

            th:nth-child(3),
            td:nth-child(3) {
                display: none;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .modal-overlay {
                padding: 1rem;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }

            th:nth-child(4),
            td:nth-child(4) {
                display: none;
            }

            .pagination {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .modal-footer {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }

            .confirm-actions {
                flex-direction: column;
            }
        }


        .status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.active {
    background-color: #d1fae5;
    color: #065f46;
}

.status-badge.expired {
    background-color: #fee2e2;
    color: #b91c1c;
}

.status-badge.upcoming {
    background-color: #dbeafe;
    color: #1e40af;
}





    </style>
</head>

<body>
    <header>
        <nav class="navbar">
            <div class="logo">SNEAKY</div>
            <div class="nav-links">
                <a href="/admin/dashboard">DASHBOARD</a>
                <a href="/admin/userManagement">USERS</a>
                <a href="/admin/orderManagement">ORDERS</a>
                <a href="/admin/productManagement">PRODUCTS</a>
                <a href="/admin/categoryManagement">CATEGORIES</a>
                <a href="/admin/couponManagement">COUPONS</a>
                <a href="/admin/offerManagement">OFFERS</a>
                <a href="/admin/sales">SALES REPORT</a>
            </div>
            <a href="/admin/logout" class="sign-out" style="text-decoration: none;">Sign Out</a>
        </nav>
    </header>

    <section class="hero">
        <h1>COUPONS</h1>
        <div class="wave"></div>
    </section>

    <main class="container">
        <!-- Alert Container -->
        <div id="alertContainer"></div>

        <div class="header-actions">
            <input type="text" class="search-box" name="search" placeholder="Search Coupons"
                value="<%= typeof searchQuery !== 'undefined' ? searchQuery : '' %>" id="searchInput">
            <button class="add-coupon" id="addCouponBtn">Add Coupon</button>
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Coupon Code</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Min Purchase</th>
                        <th>Discount (%)</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (coupons && coupons.length > 0) { %>
                        <% coupons.forEach(coupon => { %>
                            <tr data-id="<%= coupon._id %>">
                                <td><%= coupon.code %></td>
                                <td><%= new Date(coupon.startDate).toLocaleDateString() %></td>
                                <td><%= new Date(coupon.endDate).toLocaleDateString() %></td>
                                <td>₹<%= coupon.minPurchase.toLocaleString() %></td>
                                <td><%= coupon.discountPercentage %>%</td>
                                <td>
                                    <span class="status-badge <%= coupon.statusClass %>">
                                        <%= coupon.status %>
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn edit-btn">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="action-btn delete-btn">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" style="text-align: center;">No coupons found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <div class="pagination">
            <div class="pagination-info">
                <% const current = typeof currentPage !== 'undefined' ? currentPage : 1; %>
                <% const total = typeof totalCoupons !== 'undefined' ? totalCoupons : 0; %>
                <% const start = (current - 1) * 10 + 1; %>
                <% const end = Math.min(current * 10, total); %>
                Showing <%= total > 0 ? start : 0 %> to <%= end %> of <%= total %> entries
            </div>
            <div class="pagination-buttons">
                <% if (typeof totalPages !== 'undefined' && totalPages > 0) { %>
                    <button class="page-btn prev-btn" <%= current === 1 ? 'disabled' : '' %>>Previous</button>
                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <button class="page-btn <%= current === i ? 'active' : '' %> page-number" data-page="<%= i %>">
                            <%= i %>
                        </button>
                    <% } %>
                    <button class="page-btn next-btn" <%= current === totalPages ? 'disabled' : '' %>>Next</button>
                <% } %>
            </div>
        </div>
    </main>

    <!-- Add Coupon Form Modal -->
    <div class="modal-overlay" id="couponFormModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">Add New Coupon</h2>
                <button class="close-btn" id="closeCouponModal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="couponForm">
                    <input type="hidden" id="couponId" name="couponId">
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label">Coupon Code *</label>
                            <input type="text" name="code" id="code" class="form-input" placeholder="e.g., SUMMER20">
                            <div class="form-error" id="codeError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Discount Percentage *</label>
                            <input type="number" name="discountPercentage" id="discountPercentage" class="form-input" min="1" max="100">
                            <div class="form-error" id="discountPercentageError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Minimum Purchase *</label>
                            <input type="number" name="minPurchase" id="minPurchase" class="form-input" min="0">
                            <div class="form-error" id="minPurchaseError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Start Date *</label>
                            <input type="date" name="startDate" id="startDate" class="form-input">
                            <div class="form-error" id="startDateError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">End Date *</label>
                            <input type="date" name="endDate" id="endDate" class="form-input">
                            <div class="form-error" id="endDateError"></div>
                        </div>
                        <div class="form-group full-width">
                            <label class="form-label">Description</label>
                            <textarea name="description" id="description" class="form-input"></textarea>
                            <div class="form-error" id="descriptionError"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancelCouponBtn">Cancel</button>
                <button class="btn btn-primary" id="saveCouponBtn">Save Coupon</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Dialog -->
    <div class="modal-overlay" id="confirmDialog">
        <div class="confirm-dialog">
            <div class="confirm-body">
                <h3 class="confirm-title">Delete Coupon</h3>
                <p class="confirm-message">Are you sure you want to delete this coupon?</p>
                <div class="confirm-actions">
                    <button class="btn btn-secondary" id="cancelDeleteBtn">Cancel</button>
                    <button class="btn btn-primary" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Debugging flag
    // Debugging flag
    const DEBUG = true;
    
    let currentCouponId = null;
    let existingCouponCodes = JSON.parse('<%- JSON.stringify(existingCouponCodes || []) %>');
    
    // Get pagination data from EJS
    const currentPage = parseInt('<%= typeof currentPage !== "undefined" ? currentPage : 1 %>');
    const totalPages = parseInt('<%= typeof totalPages !== "undefined" ? totalPages : 1 %>');
    const totalCoupons = parseInt('<%= typeof totalCoupons !== "undefined" ? totalCoupons : 0 %>');

    function log(message) {
        if (DEBUG) console.log(message);
    }

    // Show alert function
    function showAlert(message, type = 'success') {
        log(`Showing alert: ${message}`);
        const alertContainer = document.getElementById('alertContainer');

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerHTML = `
            <span>${message}</span>
            <button type="button" onclick="this.parentElement.remove()">&times;</button>
        `;

        alertContainer.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }

    // Initialize all event listeners
    function initEventListeners() {
        log('Initializing event listeners...');
        
        // Search input
        document.getElementById('searchInput')?.addEventListener('change', function() {
            handleSearch(this.value);
        });

        // Add Coupon Button
        document.getElementById('addCouponBtn')?.addEventListener('click', function() {
            log('Add coupon button clicked');
            openModal('couponFormModal', 'add');
        });

        // Edit Buttons
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const couponId = this.closest('tr').dataset.id;
                log(`Edit button clicked for coupon: ${couponId}`);
                openModal('couponFormModal', 'edit', couponId);
            });
        });

        // Delete Buttons
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                currentCouponId = this.closest('tr').dataset.id;
                log(`Delete button clicked for coupon: ${currentCouponId}`);
                openModal('confirmDialog');
            });
        });

        // Modal Close Buttons
        document.getElementById('closeCouponModal')?.addEventListener('click', function() {
            log('Closing coupon modal');
            closeModal('couponFormModal');
        });

        document.getElementById('cancelCouponBtn')?.addEventListener('click', function() {
            log('Canceling coupon form');
            closeModal('couponFormModal');
        });

        // Save Coupon Button
        document.getElementById('saveCouponBtn')?.addEventListener('click', function(e) {
            e.preventDefault();
            log('Attempting to save coupon');
            validateAndSaveCoupon();
        });

        // Delete Confirm Buttons
        document.getElementById('cancelDeleteBtn')?.addEventListener('click', function() {
            log('Canceling delete');
            closeModal('confirmDialog');
        });

        document.getElementById('confirmDeleteBtn')?.addEventListener('click', function() {
            log('Confirming delete');
            confirmDelete();
        });

        // Pagination Buttons
        document.querySelector('.prev-btn')?.addEventListener('click', function() {
            if (currentPage > 1) {
                log('Going to previous page');
                changePage(currentPage - 1);
            }
        });

        document.querySelector('.next-btn')?.addEventListener('click', function() {
            if (currentPage < totalPages) {
                log('Going to next page');
                changePage(currentPage + 1);
            }
        });

        document.querySelectorAll('.page-number').forEach(btn => {
            btn.addEventListener('click', function() {
                const page = parseInt(this.dataset.page);
                log(`Going to page ${page}`);
                changePage(page);
            });
        });

        // Date Inputs
        const startDateInput = document.getElementById('startDate');
        if (startDateInput) {
            startDateInput.addEventListener('change', function() {
                const startDate = new Date(this.value);
                const minEndDate = new Date(startDate);
                minEndDate.setDate(minEndDate.getDate() + 1);
                document.getElementById('endDate').min = minEndDate.toISOString().split('T')[0];
                log('Start date changed, updated end date min');
            });
        }
    }

        function handleSearch(value) {
            log(`Searching for: ${value}`);
            const url = new URL(window.location.href);
            url.searchParams.set('search', value);
            url.searchParams.set('page', '1');
            window.location.href = url.toString();
        }

        // Show form error
        function showFormError(elementId, message) {
            log(`Showing form error for ${elementId}: ${message}`);
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;

            const inputElement = document.getElementById(elementId.replace('Error', ''));
            if (inputElement) {
                inputElement.style.borderColor = 'var(--danger-color)';

                inputElement.addEventListener('input', function() {
                    errorElement.textContent = '';
                    this.style.borderColor = '';
                }, { once: true });
            }
        }

        // Clear all form errors
        function clearFormErrors() {
            log('Clearing form errors');
            const errorElements = document.querySelectorAll('.form-error');
            errorElements.forEach(element => {
                element.textContent = '';
            });

            const inputElements = document.querySelectorAll('.form-input');
            inputElements.forEach(element => {
                element.style.borderColor = '';
            });
        }

        // Open modal function
        function openModal(modalId, mode = 'add', couponId = null) {
            log(`Opening modal ${modalId} in mode ${mode} for coupon ${couponId}`);
            const modal = document.getElementById(modalId);
            if (!modal) {
                log(`Modal ${modalId} not found`);
                return;
            }
            modal.style.display = 'block';

            if (modalId === 'couponFormModal') {
                const form = document.getElementById('couponForm');
                const title = modal.querySelector('.modal-title');

                clearFormErrors();
                form.reset();
                form.dataset.mode = mode;

                // Set today's date as default for start date
                const today = new Date();
                document.getElementById('startDate').valueAsDate = today;
                
                // Set min for end date to be tomorrow
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                document.getElementById('endDate').min = tomorrow.toISOString().split('T')[0];
                document.getElementById('endDate').valueAsDate = tomorrow;

                if (mode === 'edit' && couponId) {
                    title.textContent = 'Edit Coupon';
                    loadCouponData(couponId);
                } else {
                    title.textContent = 'Add New Coupon';
                }
            }
        }

        // Close modal function
        function closeModal(modalId) {
            log(`Closing modal ${modalId}`);
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
                if (modalId === 'couponFormModal') {
                    document.getElementById('couponForm').reset();
                    clearFormErrors();
                }
            }
        }

        // Load coupon data for editing
        async function loadCouponData(couponId) {
            try {
                log(`Loading coupon data for: ${couponId}`);
                const response = await fetch(`/admin/coupon/${couponId}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                log('Received coupon data:', data);

                if (data.success) {
                    const form = document.getElementById('couponForm');
                    const coupon = data.coupon;

                    form.elements.couponId.value = coupon._id;
                    form.elements.code.value = coupon.code;
                    form.elements.discountPercentage.value = coupon.discountPercentage;
                    form.elements.minPurchase.value = coupon.minPurchase;
                    form.elements.description.value = coupon.description || '';
                    
                    // Format dates for input fields
                    const startDate = new Date(coupon.startDate);
                    const endDate = new Date(coupon.endDate);
                    
                    form.elements.startDate.valueAsDate = startDate;
                    form.elements.endDate.valueAsDate = endDate;
                    
                    // Set min for end date to be start date + 1 day
                    const minEndDate = new Date(startDate);
                    minEndDate.setDate(minEndDate.getDate() + 1);
                    document.getElementById('endDate').min = minEndDate.toISOString().split('T')[0];
                } else {
                    showAlert(data.error || 'Failed to load coupon data', 'error');
                }
            } catch (error) {
                log('Error loading coupon data: ' + error);
                showAlert('Failed to load coupon data', 'error');
            }
        }

        // Validate coupon code format
        function validateCouponCode(code) {
            // First character must be a letter, followed by letters, numbers or symbols
            const regex = /^[A-Za-z][A-Za-z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]*$/;
            return regex.test(code);
        }

        // Validate and save coupon
        function validateAndSaveCoupon() {
            log('Validating coupon form');
            clearFormErrors();

            const form = document.getElementById('couponForm');
            const mode = form.dataset.mode;
            
            const code = form.elements.code.value.trim();
            const discountPercentage = parseFloat(form.elements.discountPercentage.value);
            const minPurchase = parseFloat(form.elements.minPurchase.value);
            const startDate = form.elements.startDate.value;
            const endDate = form.elements.endDate.value;
            const description = form.elements.description.value.trim();
            
            let isValid = true;

            // Validate coupon code
            if (!code) {
                showFormError('codeError', 'Coupon code is required');
                isValid = false;
            } else if (!validateCouponCode(code)) {
                showFormError('codeError', 'Coupon code must start with a letter');
                isValid = false;
            } else if (mode === 'add' && existingCouponCodes.includes(code.toUpperCase())) {
                showFormError('codeError', 'Coupon code already exists');
                isValid = false;
            }

            // Validate discount percentage
            if (isNaN(discountPercentage) || discountPercentage <= 0 || discountPercentage > 100) {
                showFormError('discountPercentageError', 'Discount must be between 1% and 100%');
                isValid = false;
            }

            // Validate minimum purchase
            if (isNaN(minPurchase) || minPurchase < 0) {
                showFormError('minPurchaseError', 'Minimum purchase must be 0 or more');
                isValid = false;
            }

            // Validate start date
            if (!startDate) {
                showFormError('startDateError', 'Start date is required');
                isValid = false;
            }

            // Validate end date
            if (!endDate) {
                showFormError('endDateError', 'End date is required');
                isValid = false;
            } else if (startDate && new Date(endDate) <= new Date(startDate)) {
                showFormError('endDateError', 'End date must be after start date');
                isValid = false;
            }

            if (isValid) {
                log('Form validation passed, saving coupon');
                saveCoupon();
            } else {
                log('Form validation failed');
            }

            return false;
        }

        // Save coupon function
        async function saveCoupon() {
            const form = document.getElementById('couponForm');
            const mode = form.dataset.mode;
            const couponId = form.elements.couponId.value;

            const couponData = {
                code: form.elements.code.value.trim(),
                discountPercentage: parseFloat(form.elements.discountPercentage.value),
                minPurchase: parseFloat(form.elements.minPurchase.value),
                startDate: form.elements.startDate.value,
                endDate: form.elements.endDate.value,
                description: form.elements.description.value.trim()
            };

            log(`Saving coupon in ${mode} mode`, couponData);

            try {
                let url, method;

                if (mode === 'add') {
                    url = '/admin/coupon/add';
                    method = 'POST';
                } else {
                    url = `/admin/coupon/${couponId}`;
                    method = 'PUT';
                }

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(couponData)
                });

                const result = await response.json();
                log('Save response:', result);

                if (result.success) {
                    showAlert(result.message || 'Coupon saved successfully');
                    closeModal('couponFormModal');
                    // Reload the page to show updated data
                    window.location.reload();
                } else {
                    showAlert(result.error || 'Failed to save coupon', 'error');
                    
                    // Show specific field errors if provided
                    if (result.errors) {
                        Object.keys(result.errors).forEach(field => {
                            showFormError(`${field}Error`, result.errors[field]);
                        });
                    }
                }
            } catch (error) {
                log('Error saving coupon: ' + error);
                showAlert('Failed to save coupon', 'error');
            }
        }

        // Confirm delete action
        async function confirmDelete() {
            if (!currentCouponId) {
                log('No coupon ID set for deletion');
                return;
            }

            log(`Deleting coupon ${currentCouponId}`);

            try {
                const response = await fetch(`/admin/coupon/${currentCouponId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                log('Delete response:', data);

                if (data.success) {
                    showAlert(data.message || 'Coupon deleted successfully');
                    closeModal('confirmDialog');
                    // Reload the page to show updated data
                    window.location.reload();
                } else {
                    showAlert(data.error || 'Failed to delete coupon', 'error');
                    closeModal('confirmDialog');
                }
            } catch (error) {
                log('Error deleting coupon: ' + error);
                showAlert('Failed to delete coupon', 'error');
                closeModal('confirmDialog');
            }
        }

        // Handle pagination
        function changePage(page) {
            const totalPages = <%= typeof totalPages !== 'undefined' ? totalPages : 1 %>;
            if (page < 1 || page > totalPages) {
                log(`Invalid page number: ${page}`);
                return;
            }

            log(`Changing to page ${page}`);
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('page', page);
            window.location.href = currentUrl.toString();
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
        log('DOM fully loaded and parsed');
        
        // Set today's date as min for start date
        const today = new Date();
        const startDateInput = document.getElementById('startDate');
        if (startDateInput) {
            startDateInput.valueAsDate = today;
            startDateInput.min = today.toISOString().split('T')[0];
        }

        // Set tomorrow as default end date
        const endDateInput = document.getElementById('endDate');
        if (endDateInput) {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            endDateInput.min = tomorrow.toISOString().split('T')[0];
            endDateInput.valueAsDate = tomorrow;
        }

        initEventListeners();
    });
    </script>
</body>

</html>