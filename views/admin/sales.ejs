<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/sneaky.png" type="image/png">
    <title>Sneaky - Sales Report</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, system-ui, sans-serif;
        }

        :root {
            --primary-color: #ff0000;
            --text-color: #333;
            --border-color: #e1e1e1;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        body {
            background-color: #f8f9fa;
        }

        /* Header Styles */
        header {
            background: #000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .sign-out {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        /* Hero Section */
        .hero {
            background: #000;
            color: white;
            padding: 4rem 2rem;
            position: relative;
        }

        .hero h1 {
            text-align: center;
            font-size: 2.5rem;
        }

        .wave {
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 50px;
            background: white;
            border-radius: 100% 100% 0 0;
        }

        /* Main Content */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Sales Summary Cards */
        .sales-summary {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .summary-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .summary-card h3 {
            font-size: 1rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .summary-card p {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-color);
        }

        /* Filter Section */
        .filter-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .date-filters {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .date-filter {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .date-filter label {
            font-size: 0.9rem;
            color: #666;
        }

        .date-filter input {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-size: 0.9rem;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #666;
        }

        td {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding: 1rem 0;
        }

        .pagination-info {
            color: #666;
        }

        .pagination-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .page-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .page-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-links {
                gap: 1rem;
            }

            .sales-summary {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .sales-summary {
                grid-template-columns: 1fr;
            }

            .filter-section {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .date-filters {
                flex-direction: column;
                gap: 1rem;
            }

            .action-buttons {
                justify-content: flex-end;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }

            .action-buttons {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }

            .pagination {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
        }


        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }



    </style>
</head>

<body>
    <header>
        <nav class="navbar">
            <div class="logo">SNEAKY</div>
            <div class="nav-links">
                <a href="/admin/dashboard">DASHBOARD</a>
                <a href="/admin/userManagement">USERS</a>
                <a href="/admin/orderManagement">ORDERS</a>
                <a href="/admin/productManagement">PRODUCTS</a>
                <a href="/admin/categoryManagement">CATEGORIES</a>
                <a href="/admin/couponManagement">COUPONS</a>
                <a href="/admin/offerManagement">OFFERS</a>
                <a href="/admin/sales">SALES REPORT</a>
            </div>
            <a href="/admin/logout" class="sign-out" style="text-decoration: none;">Sign Out</a>
        </nav>
    </header>

    <section class="hero">
        <h1>SALES REPORT</h1>
        <div class="wave"></div>
    </section>

    <main class="container">
        <!-- Alert Container -->
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-error">
                <span><%= error %></span>
                <button type="button" onclick="this.parentElement.remove()">&times;</button>
            </div>
        <% } %>

        <!-- Sales Summary Cards -->
        <div class="sales-summary">
            <div class="summary-card">
                <h3>Overall Order Amount</h3>
                <p id="totalAmount">₹<%= summary.totalAmount %></p>
            </div>
            <div class="summary-card">
                <h3>Total Discount</h3>
                <p id="totalDiscount">₹<%= summary.totalDiscount %></p>
            </div>
            <div class="summary-card">
                <h3>Total Orders</h3>
                <p id="totalOrders"><%= summary.totalOrders %></p>
            </div>
            <div class="summary-card">
                <h3>Average Order Value</h3>
                <p id="avgOrderValue">₹<%= summary.avgOrderValue %></p>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="filter-section">
            <div class="date-filters">
                <div class="date-filter">
                    <label>From</label>
                    <input type="date" id="fromDate" value="<%= filterFrom %>" <%= filterPeriod !== 'custom' ? 'disabled' : '' %>>
                </div>
                <div class="date-filter">
                    <label>To</label>
                    <input type="date" id="toDate" value="<%= filterTo %>" <%= filterPeriod !== 'custom' ? 'disabled' : '' %>>
                </div>
                <button class="btn btn-primary" id="applyDateBtn">Apply Date</button>
            </div>
            <div class="action-buttons">
                <button class="btn btn-secondary" id="clearFiltersBtn">Clear Filters</button>
                <a href="/admin/sales/download/pdf" class="btn btn-primary" id="downloadPDFBtn">Download PDF</a>
                <a href="/admin/sales/download/excel" class="btn btn-primary" id="downloadExcelBtn">Download Excel</a>
            </div>
        </div>

        <!-- Time Period Selector -->
        <div class="time-period-selector" style="margin-bottom: 1rem;">
            <select class="form-input" id="timePeriod">
                <option value="today" <%= filterPeriod === 'today' ? 'selected' : '' %>>Today</option>
                <option value="week" <%= filterPeriod === 'week' ? 'selected' : '' %>>This Week</option>
                <option value="month" <%= filterPeriod === 'month' ? 'selected' : '' %>>This Month</option>
                <option value="year" <%= filterPeriod === 'year' ? 'selected' : '' %>>This Year</option>
                <option value="custom" <%= filterPeriod === 'custom' ? 'selected' : '' %>>Custom Date Range</option>
            </select>
        </div>


        <div id="alertContainer"></div>
        <!-- Sales Table -->
        <div class="table-container">
            <table id="salesTable">
                <thead>
                    <tr>
                        <th>S.No</th>
                        <th>Order ID</th>
                        <th>Name</th>
                        <th>Delivery Date</th>
                        <th>No of Products</th>
                        <th>Total Cost</th>
                        <th>Coupon/Discount</th>
                        <th>Payment Method</th>
                    </tr>
                </thead>
                <tbody id="salesTableBody">
                    <% if (typeof initialOrders !== 'undefined' && initialOrders.length > 0) { %>
                        <% initialOrders.forEach((order, index) => { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td>#<%= order.transactionID %></td>
                                <td><%= order.name %></td>
                                <td><%= order.deliveryDate %></td>
                                <td><%= order.productsCount %></td>
                                <td>₹<%= order.totalCost.toFixed(2) %></td>
                                <td><%= order.couponCode %> (₹<%= order.discountAmount.toFixed(2) %>)</td>
                                <td><%= order.paymentMethod %></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="8" style="text-align: center;">No orders found for selected filters</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="pagination">
            <div class="pagination-info" id="paginationInfo">
                Showing 0 to 0 of 0 entries
            </div>
            <div class="pagination-buttons" id="paginationButtons">
                <button class="page-btn prev-btn" disabled>Previous</button>
                <button class="page-btn next-btn" disabled>Next</button>
            </div>
        </div>
    </main>


</body>
<script>
// This is the JavaScript part that needs to be updated in sales.ejs
document.addEventListener('DOMContentLoaded', function() {
    // Debugging flag
    const DEBUG = true;
    
    // Current page and items per page
    let currentPage = 1;
    const itemsPerPage = 10;
    let totalOrders = 0;
    let filteredOrders = [];
    let currentFilters = {
        from: '<%= filterFrom %>',
        to: '<%= filterTo %>',
        period: '<%= filterPeriod %>'
    };

    function log(message) {
        if (DEBUG) console.log(message);
    }

    // Show alert function
    function showAlert(message, type = 'success') {
        log(`Showing alert: ${message}`);
        const alertContainer = document.getElementById('alertContainer');

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerHTML = `
            <span>${message}</span>
            <button type="button" onclick="this.parentElement.remove()">&times;</button>
        `;

        alertContainer.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }

    // Update summary cards
    function updateSummaryCards(summary) {
        document.getElementById('totalAmount').textContent = `₹${parseFloat(summary.totalAmount).toFixed(2)}`;
        document.getElementById('totalDiscount').textContent = `₹${parseFloat(summary.totalDiscount).toFixed(2)}`;
        document.getElementById('totalOrders').textContent = summary.totalOrders;
        document.getElementById('avgOrderValue').textContent = `₹${parseFloat(summary.avgOrderValue).toFixed(2)}`;
    }

    // Render the sales table
    function renderTable() {
        const tableBody = document.getElementById('salesTableBody');
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, totalOrders);

        tableBody.innerHTML = '';

        if (filteredOrders.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="8" style="text-align: center;">No orders found for selected filters</td>
                </tr>
            `;
            return;
        }

        for (let i = startIndex; i < endIndex; i++) {
            const order = filteredOrders[i];
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>${i + 1}</td>
                <td>#${order.transactionID || 'N/A'}</td>
                <td>${order.name || 'Guest'}</td>
                <td>${order.deliveryDate || 'N/A'}</td>
                <td>${order.productsCount || 0}</td>
                <td>₹${order.totalCost ? parseFloat(order.totalCost).toFixed(2) : '0.00'}</td>
                <td>${order.couponCode || 'None'} (₹${order.discountAmount ? parseFloat(order.discountAmount).toFixed(2) : '0.00'})</td>
                <td>${order.paymentMethod || 'Unknown'}</td>
            `;
            
            tableBody.appendChild(row);
        }
    }

    // Render pagination
    function renderPagination() {
        const totalPages = Math.ceil(totalOrders / itemsPerPage);
        const paginationInfo = document.getElementById('paginationInfo');
        const paginationButtons = document.getElementById('paginationButtons');
        
        const start = totalOrders === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
        const end = Math.min(currentPage * itemsPerPage, totalOrders);
        
        paginationInfo.textContent = `Showing ${start} to ${end} of ${totalOrders} entries`;
        
        // Clear existing buttons
        paginationButtons.innerHTML = '';
        
        // Previous button
        const prevBtn = document.createElement('button');
        prevBtn.className = 'page-btn prev-btn';
        prevBtn.textContent = 'Previous';
        prevBtn.disabled = currentPage === 1;
        prevBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
                renderPagination();
            }
        });
        paginationButtons.appendChild(prevBtn);
        
        // Page number buttons
        for (let i = 1; i <= totalPages; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `page-btn ${currentPage === i ? 'active' : ''}`;
            pageBtn.textContent = i;
            pageBtn.addEventListener('click', () => {
                currentPage = i;
                renderTable();
                renderPagination();
            });
            paginationButtons.appendChild(pageBtn);
        }
        
        // Next button
        const nextBtn = document.createElement('button');
        nextBtn.className = 'page-btn next-btn';
        nextBtn.textContent = 'Next';
        nextBtn.disabled = currentPage === totalPages || totalPages === 0;
        nextBtn.addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
                renderPagination();
            }
        });
        paginationButtons.appendChild(nextBtn);
    }

    // Fetch sales data from server
    async function fetchSalesData() {
        try {
            showLoadingIndicator();
            
            const params = new URLSearchParams();
            if (currentFilters.from) params.append('from', currentFilters.from);
            if (currentFilters.to) params.append('to', currentFilters.to);
            params.append('period', currentFilters.period || 'custom');
            
            log(`Fetching data with params: ${params.toString()}`);
            
            const response = await fetch(`/admin/sales/data?${params.toString()}`);
            if (!response.ok) {
                throw new Error(`Server responded with status: ${response.status}`);
            }
            
            const data = await response.json();
            log('Received data:', data);
            
            if (data.success) {
                filteredOrders = data.orders;
                totalOrders = filteredOrders.length;
                currentPage = 1; // Reset to first page on new filter
                
                // Update UI with current filters
                document.getElementById('timePeriod').value = currentFilters.period || 'custom';
                document.getElementById('fromDate').value = currentFilters.from || '';
                document.getElementById('toDate').value = currentFilters.to || '';
                
                // Update download links with current filters
                updateDownloadLinks();
                
                renderTable();
                renderPagination();
                updateSummaryCards(data.summary);
                
                showAlert(`Found ${totalOrders} orders matching your criteria`, 'success');
            } else {
                showAlert(data.error || 'Failed to load data', 'error');
            }
        } catch (error) {
            console.error("Error:", error);
            showAlert('Failed to load data: ' + error.message, 'error');
        } finally {
            hideLoadingIndicator();
        }
    }

    // Update download links with current filters
    function updateDownloadLinks() {
        const params = new URLSearchParams();
        if (currentFilters.from) params.append('from', currentFilters.from);
        if (currentFilters.to) params.append('to', currentFilters.to);
        params.append('period', currentFilters.period || 'custom');
        
        const pdfBtn = document.getElementById('downloadPDFBtn');
        const excelBtn = document.getElementById('downloadExcelBtn');
        
        pdfBtn.href = `/admin/sales/download/pdf?${params.toString()}`;
        excelBtn.href = `/admin/sales/download/excel?${params.toString()}`;
    }

    // Initialize event listeners
    function initEventListeners() {
        // Time period selector
        document.getElementById('timePeriod').addEventListener('change', function() {
            const period = this.value;
            currentFilters.period = period;
            
            if (period === 'custom') {
                document.getElementById('fromDate').disabled = false;
                document.getElementById('toDate').disabled = false;
                return;
            }
            
            // Calculate date range for the period
            const today = new Date();
            const fromDate = new Date();
            
            switch(period) {
                case 'today':
                    fromDate.setDate(today.getDate());
                    break;
                case 'week':
                    fromDate.setDate(today.getDate() - 7);
                    break;
                case 'month':
                    fromDate.setMonth(today.getMonth() - 1);
                    break;
                case 'year':
                    fromDate.setFullYear(today.getFullYear() - 1);
                    break;
            }
            
            // Format dates as YYYY-MM-DD
            const format = (date) => {
                const pad = num => num.toString().padStart(2, '0');
                return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
            };
            
            currentFilters.from = format(fromDate);
            currentFilters.to = format(today);
            
            document.getElementById('fromDate').value = currentFilters.from;
            document.getElementById('toDate').value = currentFilters.to;
            document.getElementById('fromDate').disabled = true;
            document.getElementById('toDate').disabled = true;
            
            fetchSalesData();
        });

        // Apply date button
        document.getElementById('applyDateBtn').addEventListener('click', function() {
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            
            if (!fromDate || !toDate) {
                showAlert('Please select both start and end dates', 'error');
                return;
            }
            
            if (new Date(toDate) < new Date(fromDate)) {
                showAlert('End date must be after start date', 'error');
                return;
            }
            
            currentFilters.from = fromDate;
            currentFilters.to = toDate;
            currentFilters.period = 'custom';
            
            fetchSalesData();
        });

        // Clear filters button
        document.getElementById('clearFiltersBtn').addEventListener('click', function() {
            currentFilters = {
                from: '',
                to: '',
                period: 'custom'
            };
            
            document.getElementById('fromDate').value = '';
            document.getElementById('toDate').value = '';
            document.getElementById('timePeriod').value = 'custom';
            document.getElementById('fromDate').disabled = false;
            document.getElementById('toDate').disabled = false;
            
            fetchSalesData();
        });

        // Download buttons - update URLs before download
        document.getElementById('downloadPDFBtn').addEventListener('click', function(e) {
            e.preventDefault();
            const params = new URLSearchParams(currentFilters);
            window.location.href = `/admin/sales/download/pdf?${params.toString()}`;
        });
        
        document.getElementById('downloadExcelBtn').addEventListener('click', function(e) {
            e.preventDefault();
            const params = new URLSearchParams(currentFilters);
            window.location.href = `/admin/sales/download/excel?${params.toString()}`;
        });
    }

    // Initialize the page
    function init() {
        // Initialize with server-rendered data if available
        if (typeof initialOrders !== 'undefined' && Array.isArray(initialOrders)) {
            filteredOrders = initialOrders.map(order => ({
                ...order,
                transactionID: order.transactionID || 'N/A'
            }));
            totalOrders = filteredOrders.length;
            renderTable();
            renderPagination();
            updateDownloadLinks();
        }
        
        initEventListeners();
    }

    // Simple loading indicator functions
    function showLoadingIndicator() {
        document.getElementById('salesTableBody').innerHTML = `
            <tr>
                <td colspan="8" style="text-align: center;">
                    <div class="loading-spinner">Loading data...</div>
                </td>
            </tr>
        `;
    }

    function hideLoadingIndicator() {
        // Handled by renderTable()
    }

    // Initialize the page
    init();
});
</script>
</html>