<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/sneaky.png" type="image/png">
    <title>Sneaky - Product Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, system-ui, sans-serif;
        }

        :root {
            --primary-color: #ff0000;
            --text-color: #333;
            --border-color: #e1e1e1;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        body {
            background-color: #f8f9fa;
        }

        /* Header Styles */
        header {
            background: #000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .sign-out {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        /* Hero Section */
        .hero {
            background: #000;
            color: white;
            padding: 4rem 2rem;
            position: relative;
        }

        .hero h1 {
            text-align: center;
            font-size: 2.5rem;
        }

        .wave {
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 50px;
            background: white;
            border-radius: 100% 100% 0 0;
        }

        /* Main Content */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .search-box {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            width: 300px;
        }

        .add-product {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            border: none;
            cursor: pointer;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #666;
        }

        td {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
            cursor: pointer;
        }

        .listed {
            background: var(--primary-color);
            color: white;
        }

        .unlisted {
            background: #6c757d;
            color: white;
        }

        .stock-status {
            color: var(--success-color);
            font-weight: 500;
        }

        .out-of-stock {
            color: var(--danger-color);
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background: white;
            cursor: pointer;
        }

        .action-btn:hover {
            background: #f8f9fa;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding: 1rem 0;
        }

        .pagination-info {
            color: #666;
        }

        .pagination-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .page-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .page-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* Modal Styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
            padding: 2rem;
        }

        .modal {
            background: white;
            max-width: 800px;
            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            font-weight: 500;
            color: #333;
        }

        .form-input {
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        textarea.form-input {
            min-height: 100px;
            resize: vertical;
        }

        .image-upload-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
        }

        .image-upload {
            border: 2px dashed #ddd;
            padding: 1rem;
            text-align: center;
            border-radius: 4px;
            cursor: pointer;
            position: relative;
            height: 150px;
            background-size: cover;
            background-position: center;
        }

        .image-upload:hover {
            border-color: var(--primary-color);
        }

        .image-upload i {
            font-size: 2rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .image-remove {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 255, 255, 0.7);
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            font-size: 0.8rem;
            cursor: pointer;
            display: none;
            color: var(--danger-color);
        }

        .image-upload:hover .image-remove {
            display: block;
        }

        .radio-group {
            display: flex;
            gap: 1.5rem;
        }

        .radio-option {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        /* Confirmation Dialog */
        .confirm-dialog {
            background: white;
            max-width: 400px;
            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .confirm-body {
            padding: 2rem;
            text-align: center;
        }

        .confirm-title {
            font-size: 1.25rem;
            margin-bottom: 1rem;
        }

        .confirm-message {
            color: #666;
            margin-bottom: 1.5rem;
        }

        .confirm-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

        /* Alert Styles */
        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .form-error {
            color: var(--danger-color);
            font-size: 0.85rem;
            margin-top: 0.25rem;
        }
        .checkbox-group {
            display: flex;
            gap: 1rem;
        }

        .checkbox-option {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-links {
                gap: 1rem;
            }

            .search-box {
                width: 200px;
            }
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .header-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .search-box {
                width: 100%;
            }

            .table-container {
                margin: 0 -1rem;
            }

            th:nth-child(3),
            td:nth-child(3) {
                display: none;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .image-upload-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .modal-overlay {
                padding: 1rem;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }

            th:nth-child(4),
            td:nth-child(4) {
                display: none;
            }

            .pagination {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .image-upload-grid {
                grid-template-columns: 1fr;
            }

            .modal-footer {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }

            .confirm-actions {
                flex-direction: column;
            }
        }
    </style>
</head>

<body>
    <header>
        <nav class="navbar">
            <div class="logo">SNEAKY</div>
            <div class="nav-links">
                <a href="/admin/dashboard">DASHBOARD</a>
                <a href="/admin/userManagement">USERS</a>
                <a href="/admin/orderManagement">ORDERS</a>
                <a href="/admin/productManagement">PRODUCTS</a>
                <a href="/admin/categoryManagement">CATEGORIES</a>
                <a href="/admin/couponManagement">COUPONS</a>
                <a href="/admin/offerManagemnt">OFFERS</a>
                <a href="/admin/sales">SALES REPORT</a>
            </div>
            <a href="/admin/logout" class="sign-out" style="text-decoration: none;">Sign Out</a>
        </nav>
    </header>

    <section class="hero">
        <h1>PRODUCTS</h1>
        <div class="wave"></div>
    </section>

    <main class="container">
        <!-- Alert Container -->
        <div id="alertContainer"></div>

        <div class="header-actions">
            <input type="text" class="search-box" name="search" placeholder="Search Products"
                value="<%= searchQuery || '' %>" onchange="handleSearch(this.value)">
            <button class="add-product" onclick="openModal('productFormModal', 'add')">Add Product</button>
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Category</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (typeof products !== 'undefined' && products && products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <tr>
                                <td>
                                    <img src='<%= product.productImage[0] %>' alt="<%= product.productName %>"
                                        class="product-image">
                                </td>
                                <td>
                                    <%= product.productName %>
                                </td>
                                <td>
                                    <%= product.category ? product.category.name : 'N/A' %>
                                </td>
                                <td>
                                    <span class="status-badge <%= product.isListed ? 'listed' : 'unlisted' %>"
                                        onclick="toggleProductStatus('<%= product._id %>')">
                                        <%= product.isListed ? 'Listed' : 'Unlisted' %>
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn"
                                            onclick="openModal('productFormModal', 'edit', '<%= product._id %>')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="action-btn" onclick="openConfirmDialog('<%= product._id %>')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" style="text-align: center;">No products found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <div class="pagination">
            <div class="pagination-info">
                <% const current=typeof currentPage !=='undefined' ? parseInt(currentPage) : 1; const total=typeof
                    totalProducts !=='undefined' ? parseInt(totalProducts) : 0; const start=(current - 1) * 10 + 1;
                    const end=Math.min(current * 10, total); %>
                    Showing <%= total> 0 ? start : 0 %> to <%= end %> of <%= total %> entries
            </div>
            <div class="pagination-buttons">
                <% if (typeof totalPages !=='undefined' && totalPages> 0) { %>
                    <button class="page-btn" onclick="changePage(<%= current - 1 %>)" <%=current===1 ? 'disabled' : ''
                        %>>Previous</button>
                    <% for(let i=1; i <=totalPages; i++) { %>
                        <button class="page-btn <%= current === i ? 'active' : '' %>" onclick="changePage(<%= i %>)">
                            <%= i %>
                        </button>
                        <% } %>
                            <button class="page-btn" onclick="changePage(<%= current + 1 %>)" <%=current===totalPages
                                ? 'disabled' : '' %>>Next</button>
                            <% } %>
            </div>
        </div>
    </main>

    <!-- Add Product Form Modal -->
    <div class="modal-overlay" id="productFormModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">Add New Product</h2>
                <button class="close-btn" onclick="closeModal('productFormModal')">&times;</button>
            </div>
            <div class="modal-body">
                <form id="productForm" enctype="multipart/form-data">
                    <input type="hidden" id="productId" name="productId">
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label">Product Name *</label>
                            <input type="text" name="productName" id="productName" class="form-input">
                            <div class="form-error" id="productNameError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category *</label>
                            <select name="category" id="category" class="form-input">
                                <option value="" selected disabled>Select Category</option>
                                <% if (typeof categories !== 'undefined' && categories) { %>
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category._id %>">
                                            <%= category.name %>
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                            <div class="form-error" id="categoryError"></div>
                        </div>
                        <!-- <div class="form-group">
                            <label class="form-label">Price *</label>
                            <input type="number" name="price" id="price" class="form-input" min="0" oninput="calculateOfferPrice()">
                            <div class="form-error" id="priceError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Discount (%)</label>
                            <input type="number" name="discount" id="discount" class="form-input" min="0" max="100" oninput="calculateOfferPrice()">
                            <div class="form-error" id="discountError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Offer Price</label>
                            <input type="number" name="offerPrice" id="offerPrice" class="form-input" min="0" readonly>
                            <div class="form-error" id="offerPriceError"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Stock *</label>
                            <input type="number" name="stock" id="stock" class="form-input" min="0">
                            <div class="form-error" id="stockError"></div>
                        </div> -->

<!-- Add this inside the modal-body -->
<div class="form-group full-width">
    <label class="form-label">Size *</label>
    <div class="form-error" id="sizeError"></div>
    <div class="checkbox-group">
        <label class="checkbox-option">
            <input type="checkbox" name="size" value="7" onchange="toggleSizeFields('7')"> 7
        </label>
        <label class="checkbox-option">
            <input type="checkbox" name="size" value="8" onchange="toggleSizeFields('8')"> 8
        </label>
        <label class="checkbox-option">
            <input type="checkbox" name="size" value="9" onchange="toggleSizeFields('9')"> 9
        </label>
        <label class="checkbox-option">
            <input type="checkbox" name="size" value="10" onchange="toggleSizeFields('10')"> 10
        </label>
    </div>
</div>

<!-- Dynamic size-specific fields will be appended here -->
<div id="sizeFieldsContainer"></div>


                        <div class="form-group full-width">
                            <label class="form-label">Product Images * (All 4 images required)</label>
                            <div class="form-error" id="imagesError"></div>
                            <div class="image-upload-grid">
                                <% for(let i=0; i < 4; i++) { %>
                                    <div class="image-upload" data-index="<%= i %>">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <p>Image <%= i + 1 %>
                                        </p>
                                        <input type="file" name="productImages" class="product-image-input"
                                            accept="image/*" hidden>
                                        <input type="hidden" name="existingImages[]" class="existing-image-input">
                                        <button type="button" class="image-remove"
                                            onclick="removeImage(event, <%= i %>)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <% } %>
                            </div>
                        </div>
                        <div class="form-group full-width">
                            <label class="form-label">Status</label>
                            <div class="radio-group">
                                <label class="radio-option">
                                    <input type="radio" name="isListed" value="list" checked>
                                    List
                                </label>
                                <label class="radio-option">
                                    <input type="radio" name="isListed" value="unlist">
                                    Unlist
                                </label>
                            </div>
                        </div>
                        <div class="form-group full-width">
                            <label class="form-label">Description *</label>
                            <textarea name="description" id="description" class="form-input"></textarea>
                            <div class="form-error" id="descriptionError"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('productFormModal')">Cancel</button>
                <button class="btn btn-primary" onclick="validateAndSaveProduct()">Save Product</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Dialog -->
    <div class="modal-overlay" id="confirmDialog">
        <div class="confirm-dialog">
            <div class="confirm-body">
                <h3 class="confirm-title">Delete Product</h3>
                <p class="confirm-message">Are you sure you want to delete this product?</p>
                <div class="confirm-actions">
                    <button class="btn btn-secondary" onclick="closeModal('confirmDialog')">Cancel</button>
                    <button class="btn btn-primary" onclick="confirmDelete()">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentProductId = null;
        let existingProductNames = <%= typeof existingProductNames !== 'undefined' ? JSON.stringify(existingProductNames) : '[]' %>;

        // Show alert function
        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alertContainer');

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.innerHTML = `
                <span>${message}</span>
                <button type="button" onclick="this.parentElement.remove()">&times;</button>
            `;

            alertContainer.appendChild(alertDiv);

            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function handleSearch(value) {
            const url = new URL(window.location.href);
            url.searchParams.set('search', value);
            url.searchParams.set('page', '1'); // Reset to first page when searching
            window.location.href = url.toString();
        }


        // Show form error
        function showFormError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;

            const inputElement = document.getElementById(elementId.replace('Error', ''));
            if (inputElement) {
                inputElement.style.borderColor = 'var(--danger-color)';

                inputElement.addEventListener('input', function () {
                    errorElement.textContent = '';
                    this.style.borderColor = '';
                }, { once: true });
            }
        }

        // Clear all form errors
        function clearFormErrors() {
            const errorElements = document.querySelectorAll('.form-error');
            errorElements.forEach(element => {
                element.textContent = '';
            });

            const inputElements = document.querySelectorAll('.form-input');
            inputElements.forEach(element => {
                element.style.borderColor = '';
            });
        }

        // Open modal function
        function openModal(modalId, mode = 'add', productId = null) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'block';

            if (modalId === 'productFormModal') {
                const form = document.getElementById('productForm');
                const title = modal.querySelector('.modal-title');

                clearFormErrors();
                form.reset();
                form.dataset.mode = mode;

                if (mode === 'edit' && productId) {
                    title.textContent = 'Edit Product';
                    loadProductData(productId);
                } else {
                    title.textContent = 'Add New Product';
                    clearImagePreviews();
                }
            }
        }

        // Close modal function
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            if (modalId === 'productFormModal') {
                document.getElementById('productForm').reset();
                clearImagePreviews();
                clearFormErrors();
            }
        }

     // Load product data for editing
     async function loadProductData(productId) {
    try {
        const response = await fetch(`/admin/product/${productId}`);
        const data = await response.json();

        if (data.success) {
            const form = document.getElementById('productForm');
            const product = data.product;

            // Set basic fields
            form.elements.productId.value = product._id;
            form.elements.productName.value = product.productName;
            form.elements.category.value = product.category._id;
            form.elements.description.value = product.description;

            // Set size checkboxes and size-specific fields
            const sizeCheckboxes = form.querySelectorAll('input[name="size"]');
            sizeCheckboxes.forEach(checkbox => {
                checkbox.checked = false; // Reset all checkboxes
            });

            if (product.sizes && product.sizes.length > 0) {
                product.sizes.forEach(size => {
                    const sizeCheckbox = form.querySelector(`input[name="size"][value="${size.size}"]`);
                    if (sizeCheckbox) {
                        sizeCheckbox.checked = true;
                        toggleSizeFields(size.size); // Create fields for this size

                        // Populate size-specific fields
                        document.querySelector(`input[name="size_${size.size}_price"]`).value = size.price;
                        document.querySelector(`input[name="size_${size.size}_discount"]`).value = size.discount;
                        document.querySelector(`input[name="size_${size.size}_offerPrice"]`).value = size.offerPrice;
                        document.querySelector(`input[name="size_${size.size}_stock"]`).value = size.stock;
                    }
                });
            }

            // Load existing images
            clearImagePreviews();
            if (product.productImage && product.productImage.length) {
                product.productImage.forEach((imgUrl, index) => {
                    if (index < 4) {
                        const imageUpload = document.querySelector(`.image-upload[data-index="${index}"]`);
                        if (imageUpload) {
                            setImagePreview(imageUpload, imgUrl);
                        }
                    }
                });
            }
        } else {
            showAlert(data.error || 'Failed to load product data', 'error');
        }
    } catch (error) {
        console.error('Error loading product data:', error);
        showAlert('Failed to load product data', 'error');
    }
}

        // Validate and save product
        function validateAndSaveProduct() {
            clearFormErrors();

            const form = document.getElementById('productForm');
            const productName = form.elements.productName.value.trim();
            const category = form.elements.category.value;
            // const price = form.elements.price.value;
            // const offerPrice = form.elements.offerPrice.value;
            // const stock = form.elements.stock.value;
            const description = form.elements.description.value.trim();
            const sizeSelected = form.querySelector('input[name="size"]:checked');
            let isValid = true;

            // Validate product name
            if (!productName) {
                showFormError('productNameError', 'Product name is required');
                isValid = false;
            } else {
                // Check if product name already exists (for new products)
                const mode = form.dataset.mode;
                const productId = form.elements.productId.value;
                const productNameLower = productName.toLowerCase();

                if (mode === 'add' && existingProductNames.some(name => name.toLowerCase() === productNameLower)) {
                    showFormError('productNameError', 'This product name already exists');
                    isValid = false;
                } else if (mode === 'edit' && productId) {
                    // For edit mode, check if name exists but it's not the current product
                    const filteredNames = existingProductNames.filter(item => {
                        return item.id !== productId && item.name.toLowerCase() === productNameLower;
                    });

                    if (filteredNames.length > 0) {
                        showFormError('productNameError', 'This product name already exists');
                        isValid = false;
                    }
                }
            }

            // Validate category
            if (!category) {
                showFormError('categoryError', 'Category selection is required');
                isValid = false;
            }

            // // Validate price
            // if (!price) {
            //     showFormError('priceError', 'Price is required');
            //     isValid = false;
            // } else if (price <= 0) {
            //     showFormError('priceError', 'Price must be greater than 0');
            //     isValid = false;
            // }

            // // Validate offer price if provided
            // if (offerPrice && Number(offerPrice) >= Number(price)) {
            //     showFormError('offerPriceError', 'Offer price must be less than regular price');
            //     isValid = false;
            // }

            // // Validate stock
            // if (!stock && stock !== '0') {
            //     showFormError('stockError', 'Stock is required');
            //     isValid = false;
            // } else if (Number(stock) < 0) {
            //     showFormError('stockError', 'Stock cannot be negative');
            //     isValid = false;
            // }

                // Validate size
   
            if (!sizeSelected) {
                showFormError('sizeError', 'Size selection is required');
                isValid = false;
            }

    // Validate size-specific fields
    if (!validateSizeFields()) {
        isValid = false;
    }




            // Validate description
            if (!description) {
                showFormError('descriptionError', 'Description is required');
                isValid = false;
            }

            // Validate images
            const mode = form.dataset.mode;
            if (mode === 'add') {
                // For new products, all 4 images are required
                const fileInputs = document.querySelectorAll('.product-image-input');
                let hasAllImages = true;

                for (let i = 0; i < fileInputs.length; i++) {
                    if (!fileInputs[i].files || !fileInputs[i].files[0]) {
                        hasAllImages = false;
                        break;
                    }
                }

                if (!hasAllImages) {
                    showFormError('imagesError', 'All 4 product images are required');
                    isValid = false;
                }
            } else if (mode === 'edit') {
                // For editing, check if we have a total of 4 images (existing + new)
                const existingImages = document.querySelectorAll('.existing-image-input');
                const fileInputs = document.querySelectorAll('.product-image-input');
                let totalImages = 0;

                for (let i = 0; i < existingImages.length; i++) {
                    if (existingImages[i].value) {
                        totalImages++;
                    } else if (fileInputs[i].files && fileInputs[i].files[0]) {
                        totalImages++;
                    }
                }

                if (totalImages < 4) {
                    showFormError('imagesError', 'All 4 product images are required');
                    isValid = false;
                }
            }

            // If the form is valid, submit it
            if (isValid) {
                saveProduct();
            }
        }

        // Save product function
        async function saveProduct() {
    const form = document.getElementById('productForm');
    const formData = new FormData(form);
    const mode = form.dataset.mode;
    const productId = form.elements.productId.value; 

    // Clean up existing images data
    const existingImagesInputs = form.querySelectorAll('.existing-image-input');
    formData.delete('existingImages[]');

    existingImagesInputs.forEach((input, index) => {
        if (input.value) {
            formData.append('existingImages', input.value);
        } else {
            formData.append('removedImages', index);
        }
    });

    try {
        let url, method;
        
        if (mode === 'add') {
            url = '/admin/product/add';
            method = 'POST';
        } else {
            url = `/admin/product/${productId}`;
            method = 'PUT';
        }
        
        const response = await fetch(url, {
            method: method,
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showAlert(data.message || 'Product saved successfully');
            closeModal('productFormModal');
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showAlert(data.error || 'Failed to save product', 'error');
        }
    } catch (error) {
        console.error('Error saving product:', error);
        showAlert('Failed to save product', 'error');
    }
}

        // Setup image upload functionality
        function setupImageUploads() {
            const imageUploads = document.querySelectorAll('.image-upload');

            imageUploads.forEach(upload => {
                upload.addEventListener('click', function (e) {
                    if (e.target.classList.contains('image-remove') || e.target.closest('.image-remove')) {
                        return; // Let the remove button handle its own click
                    }

                    const fileInput = this.querySelector('.product-image-input');
                    fileInput.click();
                });

                const fileInput = upload.querySelector('.product-image-input');
                fileInput.addEventListener('change', function () {
                    if (this.files && this.files[0]) {
                        const reader = new FileReader();

                        reader.onload = function (e) {
                            setImagePreview(upload, e.target.result);
                            // Clear existing image reference since we're replacing it
                            upload.querySelector('.existing-image-input').value = '';
                        };

                        reader.readAsDataURL(this.files[0]);
                    }
                });
            });
        }

        // Set image preview
        function setImagePreview(container, imageUrl) {
            // Set container background
            container.style.backgroundImage = `url('${imageUrl}')`;
            container.style.backgroundSize = 'cover';
            container.style.backgroundPosition = 'center';

            // Hide default content
            const icon = container.querySelector('i');
            const text = container.querySelector('p');
            if (icon) icon.style.display = 'none';
            if (text) text.style.display = 'none';

            // Show remove button
            const removeBtn = container.querySelector('.image-remove');
            if (removeBtn) removeBtn.style.display = 'block';

            // Store existing image url
            const existingImageInput = container.querySelector('.existing-image-input');
            if (existingImageInput && imageUrl.indexOf('data:') !== 0) {
                existingImageInput.value = imageUrl;
            }
        }

        // Clear image previews
        function clearImagePreviews() {
            const imageUploads = document.querySelectorAll('.image-upload');

            imageUploads.forEach(upload => {
                // Reset container background
                upload.style.backgroundImage = '';

                // Show default content
                const icon = upload.querySelector('i');
                const text = upload.querySelector('p');
                if (icon) icon.style.display = 'block';
                if (text) text.style.display = 'block';

                // Hide remove button
                const removeBtn = upload.querySelector('.image-remove');
                if (removeBtn) removeBtn.style.display = 'none';

                // Clear file input
                const fileInput = upload.querySelector('.product-image-input');
                if (fileInput) fileInput.value = '';

                // Clear existing image reference
                const existingImageInput = upload.querySelector('.existing-image-input');
                if (existingImageInput) existingImageInput.value = '';
            });
        }

        // Remove image
        function removeImage(event, index) {
            event.stopPropagation();

            const imageUpload = document.querySelector(`.image-upload[data-index="${index}"]`);
            if (imageUpload) {
                // Reset container background
                imageUpload.style.backgroundImage = '';

                // Show default content
                const icon = imageUpload.querySelector('i');
                const text = imageUpload.querySelector('p');
                if (icon) icon.style.display = 'block';
                if (text) text.style.display = 'block';

                // Hide remove button
                const removeBtn = imageUpload.querySelector('.image-remove');
                if (removeBtn) removeBtn.style.display = 'none';

                // Clear file input
                const fileInput = imageUpload.querySelector('.product-image-input');
                if (fileInput) fileInput.value = '';

                // Clear existing image reference
                const existingImageInput = imageUpload.querySelector('.existing-image-input');
                if (existingImageInput) existingImageInput.value = '';
            }
        }

        // Open confirm dialog for deleting a product
        function openConfirmDialog(productId) {
            currentProductId = productId;
            openModal('confirmDialog');
        }

        // Confirm delete action
        async function confirmDelete() {
            if (!currentProductId) return;

            try {
                const response = await fetch(`/admin/product/${currentProductId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                });

                const data = await response.json();

                if (data.success) {
                    showAlert(data.message || 'Product deleted successfully');
                    closeModal('confirmDialog');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showAlert(data.error || 'Failed to delete product', 'error');
                    closeModal('confirmDialog');
                }
            } catch (error) {
                console.error('Error deleting product:', error);
                showAlert('Failed to delete product', 'error');
                closeModal('confirmDialog');
            }
        }

        // Toggle product listing status
        async function toggleProductStatus(productId) {
            try {
                console.log("h1");
                console.log(productId);
                
                
                const response = await fetch(`/admin/product/toggle-status/${productId}`, {
                    method: 'PATCH'
                });

                console.log("h1wetew");

                const data = await response.json();

                if (data.success) {
                    showAlert(data.message || 'Product status updated');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showAlert(data.error || 'Failed to update product status', 'error');
                }
            } catch (error) {
                console.error('Error toggling product status:', error);
                showAlert('Failed to update product status', 'error');
            }
        }

        // Handle pagination
        function changePage(page) {
            const totalPages = <%= typeof totalPages !== 'undefined' ? totalPages : 1 %>;
            if (page < 1 || page > totalPages) return;

            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('page', page);
            window.location.href = currentUrl.toString();
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function () {
            setupImageUploads();
        });


        function calculateOfferPrice() {
    const price = parseFloat(document.getElementById('price').value) || 0;
    const discount = parseFloat(document.getElementById('discount').value) || 0;

    if (discount < 0 || discount > 100) {
        document.getElementById('discountError').textContent = 'Discount must be between 0% and 100%';
        document.getElementById('offerPrice').value = '';
        return;
    } else {
        document.getElementById('discountError').textContent = '';
    }

    const offerPrice = price - (price * (discount / 100));
    document.getElementById('offerPrice').value = offerPrice.toFixed(2);
}

function toggleSizeFields(size) {
    const container = document.getElementById('sizeFieldsContainer');
    const sizeField = document.getElementById(`sizeFields_${size}`);

    if (sizeField) {
        // If fields already exist, remove them
        container.removeChild(sizeField);
    } else {
        // Create new fields for the selected size
        const sizeFields = document.createElement('div');
        sizeFields.id = `sizeFields_${size}`;
        sizeFields.innerHTML = `
            <div class="form-group">
                <label class="form-label">Price for Size ${size} *</label>
                <input type="number" name="size_${size}_price" class="form-input" min="0" required>
                <div class="form-error" id="size_${size}_priceError"></div>
            </div>
            <div class="form-group">
                <label class="form-label">Discount for Size ${size} (%)</label>
                <input type="number" name="size_${size}_discount" class="form-input" min="0" max="100" oninput="calculateOfferPrice('${size}')">
                <div class="form-error" id="size_${size}_discountError"></div>
            </div>
            <div class="form-group">
                <label class="form-label">Offer Price for Size ${size}</label>
                <input type="number" name="size_${size}_offerPrice" class="form-input" min="0" readonly>
                <div class="form-error" id="size_${size}_offerPriceError"></div>
            </div>
            <div class="form-group">
                <label class="form-label">Stock for Size ${size} *</label>
                <input type="number" name="size_${size}_stock" class="form-input" min="0" required>
                <div class="form-error" id="size_${size}_stockError"></div>
            </div>
        `;
        container.appendChild(sizeFields);
    }
}

function calculateOfferPrice(size) {
    const price = parseFloat(document.querySelector(`input[name="size_${size}_price"]`).value) || 0;
    const discount = parseFloat(document.querySelector(`input[name="size_${size}_discount"]`).value) || 0;

    if (discount < 0 || discount > 100) {
        document.getElementById(`size_${size}_discountError`).textContent = 'Discount must be between 0% and 100%';
        document.querySelector(`input[name="size_${size}_offerPrice"]`).value = '';
        return;
    } else {
        document.getElementById(`size_${size}_discountError`).textContent = '';
    }

    const offerPrice = price - (price * (discount / 100));
    document.querySelector(`input[name="size_${size}_offerPrice"]`).value = offerPrice.toFixed(2);
}
function validateSizeFields() {
    let isValid = true;
    const sizeCheckboxes = document.querySelectorAll('input[name="size"]:checked');

    sizeCheckboxes.forEach(checkbox => {
        const size = checkbox.value;
        const price = document.querySelector(`input[name="size_${size}_price"]`).value;
        const discount = document.querySelector(`input[name="size_${size}_discount"]`).value;
        const stock = document.querySelector(`input[name="size_${size}_stock"]`).value;

        if (!price || price <= 0) {
            showFormError(`size_${size}_priceError`, 'Price must be greater than 0');
            isValid = false;
        }

        if (discount && (discount < 0 || discount > 100)) {
            showFormError(`size_${size}_discountError`, 'Discount must be between 0% and 100%');
            isValid = false;
        }

        if (!stock || stock < 0) {
            showFormError(`size_${size}_stockError`, 'Stock must be a non-negative number');
            isValid = false;
        }
    });

    return isValid;
}


    </script>
</body>

</html>