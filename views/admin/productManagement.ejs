<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sneaky - Product Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, system-ui, sans-serif;
        }

        :root {
            --primary-color: #ff0000;
            --text-color: #333;
            --border-color: #e1e1e1;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        body {
            background-color: #f8f9fa;
        }

        /* Header Styles */
        header {
            background: #000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .sign-out {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        /* Hero Section */
        .hero {
            background: #000;
            color: white;
            padding: 4rem 2rem;
            position: relative;
        }

        .hero h1 {
            text-align: center;
            font-size: 2.5rem;
        }

        .wave {
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 50px;
            background: white;
            border-radius: 100% 100% 0 0;
        }

        /* Main Content */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .search-box {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            width: 300px;
        }

        .add-product {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            border: none;
            cursor: pointer;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #666;
        }

        td {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
        }

        .listed {
            background: var(--primary-color);
            color: white;
        }

        .unlisted {
            background: #6c757d;
            color: white;
        }

        .stock-status {
            color: var(--success-color);
            font-weight: 500;
        }

        .out-of-stock {
            color: var(--danger-color);
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background: white;
            cursor: pointer;
        }

        .action-btn:hover {
            background: #f8f9fa;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding: 1rem 0;
        }

        .pagination-info {
            color: #666;
        }

        .pagination-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .page-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .page-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* Modal Styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
            padding: 2rem;
        }

        .modal {
            background: white;
            max-width: 800px;
            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            font-weight: 500;
            color: #333;
        }

        .form-input {
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        textarea.form-input {
            min-height: 100px;
            resize: vertical;
        }

        .image-upload-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
        }

        .image-upload {
            border: 2px dashed #ddd;
            padding: 1rem;
            text-align: center;
            border-radius: 4px;
            cursor: pointer;
        }

        .image-upload:hover {
            border-color: var(--primary-color);
        }

        .image-upload i {
            font-size: 2rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .radio-group {
            display: flex;
            gap: 1.5rem;
        }

        .radio-option {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        /* Confirmation Dialog */
        .confirm-dialog {
            background: white;
            max-width: 400px;
            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .confirm-body {
            padding: 2rem;
            text-align: center;
        }

        .confirm-title {
            font-size: 1.25rem;
            margin-bottom: 1rem;
        }

        .confirm-message {
            color: #666;
            margin-bottom: 1.5rem;
        }

        .confirm-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-links {
                gap: 1rem;
            }

            .search-box {
                width: 200px;
            }
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .header-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .search-box {
                width: 100%;
            }

            .table-container {
                margin: 0 -1rem;
            }

            th:nth-child(3),
            td:nth-child(3) {
                display: none;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .image-upload-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .modal-overlay {
                padding: 1rem;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }

            th:nth-child(4),
            td:nth-child(4) {
                display: none;
            }

            .pagination {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .image-upload-grid {
                grid-template-columns: 1fr;
            }

            .modal-footer {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }

            .confirm-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">SNEAKY</div>
            <div class="nav-links">
                <a href="/admin/dashboard">DASHBOARD</a>
                <a href="/admin/userManagement">USERS</a>
                <a href="/admin/orderManagement">ORDERS</a>
                <a href="/admin/productManagement">PRODUCTS</a>
                <a href="/admin/categoryManagement">CATEGORIES</a>
                <a href="/admin/couponManagement">COUPONS</a>
                <a href="/admin/offerManagemnt">OFFERS</a>
                <a href="/admin/sales">SALES REPORT</a>
            </div>
            <a href="/admin/logout" class="sign-out" style="text-decoration: none;">Sign Out</a>
        </nav>
    </header>

    <section class="hero">
        <h1>PRODUCTS</h1>
        <div class="wave"></div>
    </section>

    <main class="container">
        <div class="header-actions">
            <input type="text" class="search-box" placeholder="Search Products">
            <button class="add-product" onclick="openModal('productFormModal', 'add')">Add Product</button>
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Category</th>
                        <th>Stock</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (typeof products !== 'undefined' && products && products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <tr>
                                <td>
                                    <img src='<%= product.productImage[0] %>' alt="<%= product.productName %>" class="product-image">
                                </td>
                                <td><%= product.productName %></td>
                                <td><%= product.category ? product.category.name : 'N/A' %></td>
                                <td><%= product.stock %></td>
                                <td>₹<%= product.price %></td>
                                <td>
                                    <span class="status-badge <%= product.isListed ? 'listed' : 'unlisted' %>">
                                        <%= product.isListed ? 'Listed' : 'Unlisted' %>
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn" onclick="openModal('productFormModal', 'edit', '<%= product._id %>')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="action-btn" onclick="openConfirmDialog('<%= product._id %>')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" style="text-align: center;">No products found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <div class="pagination">
            <div class="pagination-info">
                <% 
                const current = typeof currentPage !== 'undefined' ? currentPage : 1;
                const total = typeof totalProducts !== 'undefined' ? totalProducts : 0;
                const start = (current - 1) * 10 + 1;
                const end = Math.min(current * 10, total);
                %>
                Showing <%= start %> to <%= end %> of <%= total %> entries
            </div>
            <div class="pagination-buttons">
                <% if (typeof totalPages !== 'undefined' && totalPages > 1) { %>
                    <button class="page-btn" onclick="changePage(<%= current - 1 %>)" <%= current === 1 ? 'disabled' : '' %>>Previous</button>
                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <button class="page-btn <%= current === i ? 'active' : '' %>" onclick="changePage(<%= i %>)"><%= i %></button>
                    <% } %>
                    <button class="page-btn" onclick="changePage(<%= current + 1 %>)" <%= current === totalPages ? 'disabled' : '' %>>Next</button>
                <% } %>
            </div>
        </div>
    </main>

    <!-- Product Form Modal -->
    <div class="modal-overlay" id="productFormModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">Add New Product</h2>
                <button class="close-btn" onclick="closeModal('productFormModal')">&times;</button>
            </div>
            <div class="modal-body">
                <form id="productForm" enctype="multipart/form-data">
                    <input type="hidden" id="productId" name="productId">
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label">Product Name</label>
                            <input type="text" name="productName" class="form-input" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select name="category" class="form-input" required>
                                <option value="">Select Category</option>
                                <% if (typeof categories !== 'undefined' && categories) { %>
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Price</label>
                            <input type="number" name="price" class="form-input" required min="0">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Offer Price</label>
                            <input type="number" name="offerPrice" class="form-input" min="0">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Stock</label>
                            <input type="number" name="stock" class="form-input" required min="0">
                        </div>
                        <div class="form-group full-width">
                            <label class="form-label">Product Images</label>
                            <div class="image-upload-grid">
                                <% for(let i = 0; i < 4; i++) { %>
                                    <div class="image-upload" data-index="<%= i %>">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <p>Image <%= i + 1 %></p>
                                        <input type="file" name="productImages" hidden accept="image/*" <%= i === 0 ? 'required' : '' %>>
                                        <input type="hidden" name="existingImages[]">
                                    </div>
                                <% } %>
                            </div>
                        </div>
                        <div class="form-group full-width">
                            <label class="form-label">Status</label>
                            <div class="radio-group">
                                <label class="radio-option">
                                    <input type="radio" name="isListed" value="list" checked>
                                    List
                                </label>
                                <label class="radio-option">
                                    <input type="radio" name="isListed" value="unlist">
                                    Unlist
                                </label>
                            </div>
                        </div>
                        <div class="form-group full-width">
                            <label class="form-label">Description</label>
                            <textarea name="description" class="form-input" required></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('productFormModal')">Cancel</button>
                <button class="btn btn-primary" onclick="saveProduct()">Save Product</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Dialog -->
    <div class="modal-overlay" id="confirmDialog">
        <div class="confirm-dialog">
            <div class="confirm-body">
                <h3 class="confirm-title">Delete Product</h3>
                <p class="confirm-message">Are you sure you want to delete this product?</p>
                <div class="confirm-actions">
                    <button class="btn btn-secondary" onclick="closeModal('confirmDialog')">Cancel</button>
                    <button class="btn btn-primary" onclick="confirmDelete()">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentProductId = null;

        // Open modal function
        function openModal(modalId, mode = 'add', productId = null) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'block';
            
            if (modalId === 'productFormModal') {
                const form = document.getElementById('productForm');
                const title = modal.querySelector('.modal-title');
                
                form.reset();
                form.dataset.mode = mode;
                
                if (mode === 'edit' && productId) {
                    title.textContent = 'Edit Product';
                    loadProductData(productId);
                } else {
                    title.textContent = 'Add New Product';
                    clearImagePreviews();
                }
            }
        }

        // Close modal function
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            if (modalId === 'productFormModal') {
                document.getElementById('productForm').reset();
                clearImagePreviews();
            }
        }

        // Load product data for editing
        async function loadProductData(productId) {
            try {
                const response = await fetch(`/admin/product/${productId}`);
                const data = await response.json();
                
                if (data.success) {
                    const form = document.getElementById('productForm');
                    const product = data.product;
                    
                    form.elements.productId.value = product._id;
                    form.elements.productName.value = product.productName;
                    form.elements.category.value = product.category;
                    form.elements.price.value = product.price;
                    form.elements.offerPrice.value = product.offerPrice || '';
                    form.elements.stock.value = product.stock;
                    form.elements.description.value = product.description;
                    form.elements.isListed.value = product.isListed ? 'list' : 'unlist';
                    
                    // Load existing images
                    product.productImage.forEach((imgUrl, index) => {
                        const imageUpload = document.querySelector(`.image-upload[data-index="${index}"]`);
                        if (imageUpload) {
                            imageUpload.style.backgroundImage = `url(${imgUrl})`;
                            imageUpload.querySelector('i').style.display = 'none';
                            imageUpload.querySelector('p').style.display = 'none';
                            imageUpload.querySelector('input[name="existingImages[]"]').value = imgUrl;
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading product data:', error);
                alert('Failed to load product data');
            }
        }

        // Save product function
        async function saveProduct() {
            const form = document.getElementById('productForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const formData = new FormData(form);
            const mode = form.dataset.mode;
            const productId = form.elements.productId.value;
            
            try {
                const url = mode === 'edit' ? `/admin/product/${productId}` : '/admin/product';
                const method = mode === 'edit' ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(data.message);
                    closeModal('productFormModal');
                    location.reload();
                } else {
                    alert(data.error || 'Failed to save product');
                }
            } catch (error) {
                console.error('Error saving product:', error);
                alert('Failed to save product');
            }
        }

        // Open confirm dialog for deletion
        function openConfirmDialog(productId) {
            currentProductId = productId;
            openModal('confirmDialog');
        }

        // Confirm delete function
        async function confirmDelete() {
            if (!currentProductId) return;
            
            try {
                const response = await fetch(`/admin/product/${currentProductId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(data.message);
                    location.reload();
                } else {
                    alert(data.error || 'Failed to delete product');
                }
            } catch (error) {
                console.error('Error deleting product:', error);
                alert('Failed to delete product');
            }
            
            closeModal('confirmDialog');
            currentProductId = null;
        }

        // Clear image previews
        function clearImagePreviews() {
            document.querySelectorAll('.image-upload').forEach(upload => {
                upload.style.backgroundImage = '';
                upload.querySelector('i').style.display = '';
                upload.querySelector('p').style.display = '';
                upload.querySelector('input[type="file"]').value = '';
                upload.querySelector('input[name="existingImages[]"]').value = '';
            });
        }

        // Change page function
        function changePage(page) {
            const searchParams = new URLSearchParams(window.location.search);
            searchParams.set('page', page);
            window.location.href = `${window.location.pathname}?${searchParams.toString()}`;
        }

        // Search functionality
        const searchInput = document.querySelector('.search-box');
        let searchTimeout;
        
        searchInput.addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchParams = new URLSearchParams(window.location.search);
                searchParams.set('search', e.target.value.trim());
                searchParams.set('page', 1);
                window.location.href = `${window.location.pathname}?${searchParams.toString()}`;
            }, 500);
        });

        // Image upload preview functionality
        document.querySelectorAll('.image-upload').forEach(upload => {
            const fileInput = upload.querySelector('input[type="file"]');
            fileInput.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    const icon = upload.querySelector('i');
                    const text = upload.querySelector('p');
                    
                    reader.onload = function(e) {
                        upload.style.backgroundImage = `url(${e.target.result})`;
                        upload.style.backgroundSize = 'cover';
                        upload.style.backgroundPosition = 'center';
                        if (icon) icon.style.display = 'none';
                        if (text) text.style.display = 'none';
                    };
                    
                    reader.readAsDataURL(this.files[0]);
                }
            });

            upload.addEventListener('click', () => {
                fileInput.click();
            });
        });

        // Close modals when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal-overlay')) {
                event.target.style.display = 'none';
                if (event.target.id === 'productFormModal') {
                    document.getElementById('productForm').reset();
                    clearImagePreviews();
                }
            }
        };

        // Initialize search box with current search term
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const searchTerm = urlParams.get('search');
            if (searchTerm) {
                searchInput.value = searchTerm;
            }
        });

        // Handle form submission
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveProduct();
        });

        // Toggle product status
        async function toggleProductStatus(productId) {
            try {
                const response = await fetch(`/admin/product/${productId}/toggle`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    alert(data.message);
                    location.reload();
                } else {
                    alert(data.error || 'Failed to update product status');
                }
            } catch (error) {
                console.error('Error toggling product status:', error);
                alert('Failed to update product status');
            }
        }

        // Handle server errors
        function handleServerError(error) {
            console.error('Server error:', error);
            alert('An error occurred while processing your request. Please try again.');
        }

        // Validate form inputs
        function validateForm() {
            const form = document.getElementById('productForm');
            const price = parseFloat(form.elements.price.value);
            const offerPrice = parseFloat(form.elements.offerPrice.value);
            const stock = parseInt(form.elements.stock.value);

            if (price <= 0) {
                alert('Price must be greater than 0');
                return false;
            }

            if (offerPrice && offerPrice >= price) {
                alert('Offer price must be less than regular price');
                return false;
            }

            if (stock < 0) {
                alert('Stock cannot be negative');
                return false;
            }

            return true;
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR'
            }).format(amount);
        }

        // Display alert messages
        function showAlert(message, type = 'success') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            
            document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.header-actions'));
            
            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Close modal on Escape key
            if (e.key === 'Escape') {
                const openModals = document.querySelectorAll('.modal-overlay[style="display: block"]');
                openModals.forEach(modal => closeModal(modal.id));
            }

            // Open add product modal on Ctrl+A
            if (e.ctrlKey && e.key === 'a' && !e.repeat) {
                e.preventDefault();
                openModal('productFormModal', 'add');
            }
        });
    </script>
</body>
</html>