<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/sneaky.png" type="image/png">
    <title>Sneaky - Single Order</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, system-ui, sans-serif;
        }

        :root {
            --primary-color: #ff0000;
            --text-color: #333;
            --border-color: #e1e1e1;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
        }

        body {
            background-color: #f8f9fa;
        }

        /* Header Styles */
        header {
            background: #000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .sign-out {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        /* Hero Section */
        .hero {
            background: #000;
            color: white;
            padding: 4rem 2rem;
            position: relative;
        }

        .hero h1 {
            text-align: center;
            font-size: 2.5rem;
        }

        .wave {
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 50px;
            background: white;
            border-radius: 100% 100% 0 0;
        }

        /* Main Content */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .search-box {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            width: 300px;
        }

        .order-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            margin-top: 1.5rem;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #666;
        }

        td {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
            display: inline-block;
            text-align: center;
        }


        .shipped {
            background: var(--success-color);
            color: white;
        }

        .pending {
            background: var(--warning-color);
            color: black;
        }

        .cancel {
            background: var(--danger-color);
            color: white;
        }

        .processing {
            background: var(--info-color);
            color: white;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background: white;
            cursor: pointer;
        }

        .action-btn:hover {
            background: #f8f9fa;
        }

        /* Pagination Styles */
        .pagination {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            margin-top: 1.5rem;
            gap: 0.5rem;
        }

        .pagination-text {
            margin-right: auto;
            color: #666;
            font-size: 0.9rem;
        }

        .pagination-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background: white;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .pagination-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .pagination-btn:hover:not(.active) {
            background: #f8f9fa;
        }

        /* Footer Styles */
        footer {
            background: #1e1e1e;
            color: white;
            padding: 1rem;
            text-align: center;
            font-size: 0.8rem;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-links {
                gap: 1rem;
            }

            .search-box {
                width: 200px;
            }

        }

        @media (max-width: 992px) {
            .order-details-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

              
            .order-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .status-actions {
                width: 100%;
                justify-content: space-between;
            }
            
            .products-table thead {
                display: none;
            }
            
            .products-table, .products-table tbody, .products-table tr, .products-table td {
                display: block;
                width: 100%;
            }
            
            .products-table tr {
                margin-bottom: 15px;
                border-bottom: 1px solid #eee;
            }
            
            .products-table td {
                text-align: right;
                padding: 10px;
                position: relative;
                border-bottom: none;
            }
            
            .products-table td:before {
                content: attr(data-label);
                float: left;
                font-weight: bold;
            }
            
            .product-cell {
                justify-content: flex-end;
            }

            .header-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .search-box {
                width: 100%;
            }

            .table-container {
                margin: 0 -1rem;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }

            .pagination {
                flex-wrap: wrap;
                justify-content: center;
            }

            .pagination-text {
                width: 100%;
                text-align: center;
                margin-bottom: 0.5rem;
            }
        }


        @media (max-width: 576px) {
            .order-details-grid {
                grid-template-columns: 1fr;
            }
        }


        .buttons {
            display: flex;
            justify-content:left;
            margin-bottom: 30px;
            margin-top: 30px;
            gap: 20px;
        }

        .btn {
            background-color: #ff0000;
            color: #fff;
            border: none;
            padding: 5px 40px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.3s;
        }

        .btn:hover {
            background-color: #d00000;
        }


    
        /* Hero Section Styles */
        .hero {
            background-color: #000;
            color: white;
            text-align: center;
            padding: 60px 0;
            position: relative;
        }
        
        .hero h1 {
            font-size: 36px;
            letter-spacing: 2px;
        }
        
        .wave-divider {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 80px;
            background-color: white;
            border-radius: 100% 100% 0 0 / 100% 100% 0 0;
            transform: translateY(50%);
        }
        
        /* Order Content Styles */
        .order-content {
            background-color: white;
            padding: 60px 5% 40px;
            max-width: 1200px;
            margin: 0 auto;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .order-id {
            font-size: 18px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .status-badge {
            background-color: #f2f2f2;
            padding: 5px 15px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: normal;
        }
        
        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-size: 14px;
        }
        
        .btn-primary {
            background-color: #ff0000;
            color: white;
        }
        
        .btn-secondary {
            background-color: #f2f2f2;
            color: #333;
            margin-right: 10px;
        }
        
        .status-actions {
            display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 15px;
        }
        
        .status-select {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ddd;
            min-width: 120px;
        }
        .verify-return-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }
    .verify-return-btn:hover {
        background-color: #218838;
    }
        
        /* Order Details Grid */
        .order-details-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .details-box h3 {
            font-size: 16px;
            margin-bottom: 10px;
            color: black;
        }
        
        .details-box p {
            font-size: 14px;
            margin-bottom: 5px;
        }
        
        .view-profile {
            color: #ff0000;
            font-size: 14px;
            display: inline-block;
            margin-top: 5px;
        }
        
        /* Order Products Table */
        .products-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
        }
        
        .products-table th {
            background-color: #f2f2f2;
            text-align: left;
            padding: 12px 15px;
            font-size: 18px;
            font-weight:bolder;
            color: black;
        }
        
        .products-table td {
            padding: 15px;
            border-bottom: 1px solid #eee;
            font-size: 14px;
        }
        
        .product-cell {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .product-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 4px;
        }
        
        .totals {
            text-align: right;
            font-size: 14px;
        }
        
        .totals tr td:first-child {
            padding-right: 15px;
        }
        
        .grand-total {
            font-weight: bold;
            font-size: 16px;
        }
        
        /* Payment Info */
        .payment-info {
            margin-bottom: 30px;
        }
        
        .payment-info h3 {
            font-size: 16px;
            margin-bottom: 10px;
            color: #555;
        }
        
        .payment-method {
            font-size: 14px;
            margin-bottom: 15px;
        }
        
        .action-buttons {
            display: flex;
            gap: 10px;
        }
        
        .btn-danger {
            background-color: #ff0000;
            color: white;
        }
        
        .singleadminorder-btn {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }
        .item-action-btn{
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }
        .btn-save-status{
            display: inline-block;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }

        .singleadminorder-reason-btn {
            display: inline-block;
            padding: 8px 16px;
            margin-top: 5px;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            background-color: #ff0000;
            color: white;
            border: none;
        }





        .details-box{
            border: 1px solid red;
            border-radius: 10px;
            margin: 5px;
            padding: 10px;
        }

        .reason-section{
            background-color: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            margin: 15px 0; 
            border-left: 4px solid #dc3545;
}
.reason-section h3 {
    font-size: 16px;
            margin-bottom: 10px;
            color: #555;
}

.text-right {
            text-align: right;
            margin-left: 80px;
        }
        .coupon-text-right {
            text-align: right;
            margin-left: 80px;
            color: red;
        }
        
        .total-row td {
            font-weight: bold;
            border-top: 2px solid #eee;
        }

        .item-status-select {
    padding: 5px 10px;
    border-radius: 4px;
    border: 1px solid #ddd;
    background-color: #fff;
    cursor: pointer;
}


.cancelled-item { color: #dc3545; text-decoration: line-through; }
        .returned-item { color: #fd7e14; }
        .reason-section { 
            background-color: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            margin: 15px 0; 
            border-left: 4px solid #dc3545;
        }

        .status-badge.ordered { background-color: #17a2b8; }
        .status-badge.processing { background-color: #ffc107; color: #212529; }
        .status-badge.shipped { background-color: #6f42c1; }
        .status-badge.delivered { background-color: #28a745; }
        .status-badge.cancelled { background-color: #dc3545; }
        .status-badge.return-requested { background-color: #fd7e14; }
        .status-badge.returned { background-color: #6c757d; }

        .deduction {
            color: #dc3545;
            font-weight: bold;
        }

    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">SNEAKY</div>
            <div class="nav-links">
                <a href="/admin/dashboard">DASHBOARD</a>
                <a href="/admin/userManagement">USERS</a>
                <a href="/admin/orderManagement">ORDERS</a>
                <a href="/admin/productManagement">PRODUCTS</a>
                <a href="/admin/categoryManagement">CATEGORIES</a>
                <a href="/admin/couponManagement">COUPONS</a>
                <a href="/admin/offerManagement">OFFERS</a>
                <a href="/admin/sales">SALES REPORT</a>
            </div>
            <a href="/admin/logout" class="sign-out">Sign Out</a>
        </nav>
    </header>

    <section class="hero">
        <h1>ORDER DETAILS</h1>
        <div class="wave-divider"></div>
    </section>

    <section class="order-content">
        <!-- Order Header -->
        <div class="order-header">
            <div class="order-id">
                Order ID: #<%= order.transactionId %>
                <span class="status-badge <%= order.status.toLowerCase().replace(' ', '-') %>">
                    <%= order.status %>
                </span>
            </div>
            <!-- Overall Order Status Dropdown -->
            <div class="status-actions">
                <select id="statusSelect" class="status-select">
                    <% if (order.status === 'Ordered') { %>
                        <option value="Ordered" selected>Ordered</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Cancelled">Cancel</option>
                    <% } else if (order.status === 'Processing') { %>
                        <option value="Processing" selected>Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Cancelled">Cancel</option>
                    <% } else if (order.status === 'Shipped') { %>
                        <option value="Shipped" selected>Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancel</option>
                    <% } else if (order.status === 'Delivered') { %>
                        <option value="Delivered" selected>Delivered</option>
                    <% } else if (order.status === 'Return Requested') { %>
                        <option value="Return Requested" selected>Return Requested</option>
                        <option value="Returned">Verify Return</option>
                    <% } else { %>
                        <option value="<%= order.status %>" selected><%= order.status %></option>
                    <% } %>
                </select>
                <button id="saveStatusBtn" class="btn-save-status" disabled>Save</button>
            </div>
        </div>

        <!-- Order Details -->
        <div class="order-details-grid">
            <div class="details-box">
                <h3>Customer Details</h3>
                <p><%= order.user.name %></p>
                <p><%= order.user.email %></p>
                <p><%= order.user.phone || 'No Phone' %></p>
            </div>
            <div class="details-box">
                <h3>Shipping Address</h3>
                <p><%= order.shippingAddress.name %></p>
                <p><%= order.shippingAddress.street %></p>
                <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %>, <%= order.shippingAddress.zip %></p>
                <p><%= order.shippingAddress.country %></p>
            </div>
            <div class="details-box">
                <h3>Order Details</h3>
                <p>Order ID: #<%= order.transactionId %></p>
                <p>Order Date: <%= order.createdAt.toLocaleDateString() %></p>
                <p>Order Total: ₹<%= order.totalAmount %></p>
            </div>
        </div>

        <!-- Products Table -->
        <table class="products-table">
            <thead>
                <tr>
                    <th>Products</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Status</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% order.items.forEach((item, index) => { %>
                    <tr class="<%= item.status === 'Cancelled' ? 'cancelled-item' : '' %> <%= item.status === 'Returned' ? 'returned-item' : '' %>">
                        <td data-label="Products">
                            <div class="product-cell">
                                <% if (item.product && item.product.productImage && item.product.productImage[0]) { %>
                                    <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="product-image">
                                <% } else { %>
                                    <img src="/images/placeholder.jpg" alt="No image available" class="product-image">
                                <% } %>
                                <span><%= item.product ? item.product.productName : 'Product Unavailable' %></span>
                            </div>
                        </td>
                        <td data-label="Price">₹<%= item.price.toFixed(2) %></td>
                        <td data-label="Quantity"><%= item.quantity %></td>
                        <td data-label="Status">
                            <% if (!item.cancelled && !item.returned && ['Ordered', 'Processing', 'Shipped'].includes(order.status)) { %>
                                <select class="item-status-select" data-item-id="<%= item._id %>">
                                    <option value="Ordered" <%= item.status === 'Ordered' ? 'selected' : '' %>>Ordered</option>
                                    <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                    <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                    <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                </select>
                                <button class="save-item-status-btn" data-item-id="<%= item._id %>">Save</button>
                            <% } else if (item.status === 'Return Requested') { %>
                                <span class="status-badge return-requested">Return Requested</span>
                                <button class="verify-item-return-btn" data-item-id="<%= item._id %>">Verify Return</button>
                            <% } else { %>
                                <span class="status-badge <%= item.status.toLowerCase().replace(' ', '-') %>"><%= item.status %></span>
                            <% } %>
                        </td>
                        <td data-label="Total">₹<%= (item.price * item.quantity).toFixed(2) %></td>
                        <td>
                            <% if (!item.cancelled && !item.returned && ['Ordered', 'Processing', 'Shipped'].includes(item.status)) { %>
                                <button class="item-action-btn" 
                                        data-action="cancel" 
                                        data-item-id="<%= item._id %>"
                                        data-product-name="<%= item.product ? item.product.productName : 'Product' %>">
                                    Cancel Item
                                </button>
                            <% } %>
                        </td>
                    </tr>
                    <% if (item.cancellationReason) { %>
                        <tr>
                            <td colspan="6" class="item-reason">
                                <strong>Cancellation Reason:</strong> <%= item.cancellationReason %>
                            </td>
                        </tr>
                    <% } %>
                    <% if (item.returnReason) { %>
                        <tr>
                            <td colspan="6" class="item-reason">
                                <strong>Return Reason:</strong> <%= item.returnReason %>
                                <% if (item.status === 'Return Requested' && !item.returnVerified) { %>
                                    <button class="verify-return-btn" data-item-id="<%= item._id %>">Verify Return</button>
                                <% } %>
                            </td>
                        </tr>
                    <% } %>
                <% }) %>
            </tbody>
        </table>

        <!-- Order Totals -->
        <table class="totals" align="right">
            <tr>
                <td>Sub Total:</td>
                <td>₹<%= order.subTotal %></td>
            </tr>
            
            <% if (order.cancelledAmount > 0) { %>
                <tr class="deduction">
                    <td>Cancelled Items:</td>
                    <td>-₹<%= order.cancelledAmount %></td>
                </tr>
            <% } %>
            
            <% if (order.returnedAmount > 0) { %>
                <tr class="deduction">
                    <td>Returned Items:</td>
                    <td>-₹<%= order.returnedAmount %></td>
                </tr>
            <% } %>
            
            <tr>
                <td>Shipping Cost:</td>
                <td>₹<%= order.shippingCost %></td>
            </tr>
            
            <% if (order.discountAmount > 0) { %>
                <tr>
                    <td>Coupon (<%= order.couponCode || 'Applied' %>):</td>
                    <td>-₹<%= order.discountAmount %></td>
                </tr>
            <% } %>
            
            <tr class="grand-total">
                <td>Grand Total:</td>
                <td>₹<%= order.totalAmount %></td>
            </tr>
        </table>

        <!-- Payment Info -->
        <div class="payment-info">
            <h3>Payment Info</h3>
            <p class="payment-method"><%= order.paymentMethod %></p>

            <% if (order.cancellationReason) { %>
                <div class="reason-section">
                    <h3>Cancellation Reason</h3>
                    <p><%= order.cancellationReason %></p>
                </div>
            <% } %>
            
            <% if (order.returnReason) { %>
                <div class="reason-section">
                    <h3>Return Reason</h3>
                    <p><%= order.returnReason %></p>
                    <!-- <% if (order.status === 'Return Requested' && !order.returnVerified) { %>
                        <button class="singleadminorder-reason-btn" id="verifyReturnBtn">Verify Return</button>
                    <% } %> -->
                </div>
            <% } %>

            <div class="action-buttons">
                <a href="/admin/orderManagement" class="singleadminorder-btn">Back</a>
                <% if (['Return Requested'].includes(order.status)) { %>
                    <button id="verifyReturnBtn" class="singleadminorder-btn verify-btn">Verify Return</button>
                <% } %>
            </div>
        </div>
    </section>

    <footer>
        Copyright © SNEAKY 2025
    </footer>
</body>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Overall Status Management
        const statusSelect = document.getElementById('statusSelect');
        const saveStatusBtn = document.getElementById('saveStatusBtn');
        
        if (statusSelect && saveStatusBtn) {
            const currentStatus = '<%= order.status %>';
            
            // Enable/disable save button based on selection
            statusSelect.addEventListener('change', function() {
                saveStatusBtn.disabled = this.value === currentStatus;
            });

            // Save status handler
            saveStatusBtn.addEventListener('click', function() {
                const newStatus = statusSelect.value;
                
                Swal.fire({
                    title: 'Confirm Status Update',
                    html: `Change status from <strong>${currentStatus}</strong> to <strong>${newStatus}</strong>?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Update',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return fetch('/admin/update-order-status', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                orderId: '<%= order._id %>',
                                status: newStatus
                            })
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Status update failed');
                            return response.json();
                        })
                        .catch(error => {
                            Swal.showValidationMessage(error.message);
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Status Updated!',
                            text: result.value.message,
                            willClose: () => window.location.reload()
                        });
                    }
                });
            });
        }

        // Item Status Management
        document.querySelectorAll('.save-item-status-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                const select = document.querySelector(`.item-status-select[data-item-id="${itemId}"]`);
                const newStatus = select.value;
                
                Swal.fire({
                    title: 'Update Item Status',
                    text: `Change item status to ${newStatus}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Update',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return fetch('/admin/update-item-status', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                orderId: '<%= order._id %>',
                                itemId: itemId,
                                status: newStatus
                            })
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Item status update failed');
                            return response.json();
                        })
                        .catch(error => {
                            Swal.showValidationMessage(error.message);
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Item Status Updated!',
                            text: result.value.message,
                            willClose: () => window.location.reload()
                        });
                    }
                });
            });
        });

        // Return Verification
        const verifyReturnBtn = document.getElementById('verifyReturnBtn');
        if (verifyReturnBtn) {
            verifyReturnBtn.addEventListener('click', function() {
                Swal.fire({
                    title: 'Verify Return',
                    html: `
                        <p>This will:</p>
                        <ol>
                            <li>Process refund to customer's wallet</li>
                            <li>Restore product stock quantities</li>
                            <li>Mark order as Returned</li>
                        </ol>
                        <p>Total refund amount: ₹<%= order.totalAmount %></p>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    confirmButtonText: 'Verify Return',
                    cancelButtonText: 'Cancel',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return fetch('/admin/verify-return', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                orderId: '<%= order._id %>'
                            })
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Return verification failed');
                            return response.json();
                        })
                        .catch(error => {
                            Swal.showValidationMessage(error.message);
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Return Verified!',
                            html: `
                                <p>${result.value.message}</p>
                                <p>₹<%= order.totalAmount %> refunded to customer.</p>
                            `,
                            willClose: () => window.location.reload()
                        });
                    }
                });
            });
        }

        // Item Return Verification
        document.querySelectorAll('.verify-item-return-btn, .verify-return-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                
                Swal.fire({
                    title: 'Verify Item Return',
                    html: `
                        <p>This will:</p>
                        <ol>
                            <li>Process refund for this item to customer's wallet</li>
                            <li>Restore product stock quantity</li>
                            <li>Mark item as Returned</li>
                        </ol>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    confirmButtonText: 'Verify Return',
                    cancelButtonText: 'Cancel',
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return fetch('/admin/verify-item-return', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                orderId: '<%= order._id %>',
                                itemId: itemId
                            })
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Item return verification failed');
                            return response.json();
                        })
                        .catch(error => {
                            Swal.showValidationMessage(error.message);
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Item Return Verified!',
                            text: result.value.message,
                            willClose: () => window.location.reload()
                        });
                    }
                });
            });
        });

        // Cancel Order Button
        document.getElementById('cancelOrderBtn')?.addEventListener('click', function() {
            Swal.fire({
                title: 'Cancel Entire Order',
                html: `
                    <p>You are about to cancel this entire order.</p>
                    <textarea id="cancelReason" class="swal2-textarea" 
                        placeholder="Please enter reason for cancellation (required)" required></textarea>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Confirm Cancellation',
                preConfirm: () => {
                    const reason = document.getElementById('cancelReason').value;
                    if (!reason) {
                        Swal.showValidationMessage('Reason is required');
                        return false;
                    }
                    return { reason };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/admin/cancel-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            orderId: '<%= order._id %>',
                            reason: result.value.reason
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Cancelled',
                                text: data.message,
                                willClose: () => location.reload()
                            });
                        } else {
                            throw new Error(data.message);
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
                }
            });
        });
    
        // Cancel Item Button (Admin)
        document.querySelectorAll('.item-action-btn[data-action="cancel"]').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                const productName = this.getAttribute('data-product-name');
                
                Swal.fire({
                    title: `Cancel ${productName}`,
                    html: `
                        <p>You are about to cancel this item from the order.</p>
                        <textarea id="cancelReason" class="swal2-textarea" 
                            placeholder="Please enter reason for cancellation (required)" required></textarea>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Submit Cancellation',
                    preConfirm: () => {
                        const reason = document.getElementById('cancelReason').value;
                        if (!reason) {
                            Swal.showValidationMessage('Reason is required');
                            return false;
                        }
                        return { reason };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/admin/cancel-order-item', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                orderId: '<%= order._id %>',
                                itemId: itemId,
                                reason: result.value.reason
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Item Cancelled',
                                    text: data.message,
                                    willClose: () => window.location.reload()
                                });
                            } else {
                                throw new Error(data.message);
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error', error.message, 'error');
                        });
                    }
                });
            });
        });
    });
</script>


</html>