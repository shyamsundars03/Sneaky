<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/sneaky.png" type="image/png">
    <title>Sneaky - Category Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, system-ui, sans-serif;
        }

        :root {
            --primary-color: #ff0000;
            --text-color: #333;
            --border-color: #e1e1e1;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        body {
            background-color: #f8f9fa;
        }

        /* Header Styles */
        header {
            background: #000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .sign-out {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        /* Hero Section */
        .hero {
            background: #000;
            color: white;
            padding: 4rem 2rem;
            position: relative;
        }

        .hero h1 {
            text-align: center;
            font-size: 2.5rem;
        }

        .wave {
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 50px;
            background: white;
            border-radius: 100% 100% 0 0;
        }

        /* Main Content */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .search-box {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            width: 300px;
        }

        .add-category {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            border: none;
            cursor: pointer;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #666;
        }

        td {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
            background: var(--primary-color);
            color: white;
            cursor: pointer;
        }

        .unlisted {
            background: #6c757d;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background: white;
            cursor: pointer;
        }

        .action-btn:hover {
            background: #f8f9fa;
        }

        /* Modal Styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
            padding: 2rem;
        }

        .modal {
            background: white;
            max-width: 600px;
            margin: 0 auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        textarea.form-input {
            min-height: 100px;
            resize: vertical;
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        /* Error message style */
        .error-message {
            color: var(--danger-color);
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
        }

        .form-input.error {
            border-color: var(--danger-color);
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-links {
                gap: 1rem;
            }

            .search-box {
                width: 200px;
            }
        }

        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .header-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .search-box {
                width: 100%;
            }

            .table-container {
                margin: 0 -1rem;
            }
        }

        @media (max-width: 480px) {
            .hero h1 {
                font-size: 2rem;
            }

            .modal-footer {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">SNEAKY</div>
            <div class="nav-links">
                <a href="/admin/dashboard">DASHBOARD</a>
                <a href="/admin/userManagement">USERS</a>
                <a href="/admin/orderManagement">ORDERS</a>
                <a href="/admin/productManagement">PRODUCTS</a>
                <a href="/admin/categoryManagement">CATEGORIES</a>
                <a href="/admin/couponManagement">COUPONS</a>
                <a href="/admin/offerManagemnt">OFFERS</a>
                <a href="/admin/sales">SALES REPORT</a>
            </div>
            <a href="/admin/logout" class="sign-out">Sign Out</a>
        </nav>
    </header>

    <section class="hero">
        <h1>CATEGORIES</h1>
        <div class="wave"></div>
    </section>

    <main class="container">
        <div class="header-actions">
            <input type="text" class="search-box" placeholder="Search Category">
            <button class="add-category" onclick="openModal('categoryFormModal', 'add')">Add New Category</button>
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Category Name</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if(categories && categories.length > 0) { %>
                        <% categories.forEach(function(category) { %>
                            <tr data-category-id="<%= category._id %>">
                                <td><%= category.name %></td>
                                <td><%= category.description %></td>
                                <td>
                                    <span class="status-badge <%= !category.isListed ? 'unlisted' : '' %>" 
                                          onclick="toggleStatus('<%= category._id %>')">
                                        <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn" onclick="openModal('categoryFormModal', 'edit', <%= JSON.stringify(category) %>)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <!-- <button class="action-btn" onclick="openModal('confirmDialog', 'delete', <%= JSON.stringify(category) %>)">
                                            <i class="fas fa-trash"></i>
                                        </button> -->
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" class="text-center">No categories found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </main>

    <!-- Category Form Modal -->
    <div class="modal-overlay" id="categoryFormModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">Add New Category</h2>
                <button class="close-btn" onclick="closeModal('categoryFormModal')">&times;</button>
            </div>
            <div class="modal-body">
                <form id="categoryForm">
                    <div class="form-group">
                        <label class="form-label">Category Name</label>
                        <input type="text" name="name" id="categoryName" class="form-input" required 
                               minlength="2" maxlength="50">
                        <div id="categoryNameError" class="error-message">Please enter a valid category name</div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea name="description" id="categoryDescription" class="form-input" required
                                  minlength="5" maxlength="200"></textarea>
                        <div id="descriptionError" class="error-message">Please enter a description</div>
                    </div>
                    <!-- <div class="form-group">
                        <label class="form-label">Status</label>
                        <select name="status" class="form-input" required>
                            <option value="listed">Listed</option>
                            <option value="unlisted">Unlisted</option>
                        </select>
                    </div> -->
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('categoryFormModal')">Cancel</button>
                <button class="btn btn-primary" onclick="validateAndSaveCategory()">Save Category</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Dialog -->
    <div class="modal-overlay" id="confirmDialog">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">Delete Category</h2>
                <button class="close-btn" onclick="closeModal('confirmDialog')">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this category?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('confirmDialog')">Cancel</button>
                <button class="btn btn-primary" onclick="deleteCategory()">Delete</button>
            </div>
        </div>
    </div>

    <script>
        let selectedCategoryId = null;
        let existingCategories = [];

        // Initialize with existing category names (from server)
        <% if(categories && categories.length > 0) { %>
            existingCategories = [<% categories.forEach(function(category, index) { %>
                '<%= category.name.toLowerCase() %>'<%= index < categories.length - 1 ? ',' : '' %>
            <% }); %>];
        <% } %>

        function openModal(modalId, mode = 'add', categoryData = null) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'block';
            
            if (modalId === 'categoryFormModal') {
                const form = document.getElementById('categoryForm');
                const title = modal.querySelector('.modal-title');
                title.textContent = mode === 'add' ? 'Add New Category' : 'Edit Category';
                
                // Reset error messages
                resetFormErrors();
                
                if (mode === 'edit' && categoryData) {
                    selectedCategoryId = categoryData._id;
                    form.querySelector('input[name="name"]').value = categoryData.name;
                    form.querySelector('textarea[name="description"]').value = categoryData.description;
                } else {
                    selectedCategoryId = null;
                    form.reset();
                }
            } else if (modalId === 'confirmDialog' && categoryData) {
                selectedCategoryId = categoryData._id;
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'none';
            if (modalId === 'categoryFormModal') {
                document.getElementById('categoryForm').reset();
                resetFormErrors();
            }
            selectedCategoryId = null;
        }

        // Reset form errors
        function resetFormErrors() {
            const errorMessages = document.querySelectorAll('.error-message');
            const inputFields = document.querySelectorAll('.form-input');
            
            errorMessages.forEach(el => el.style.display = 'none');
            inputFields.forEach(el => el.classList.remove('error'));
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal-overlay')) {
                event.target.style.display = 'none';
                selectedCategoryId = null;
            }
        }

        // Validate the category form
        function validateCategoryForm() {
            let isValid = true;
            resetFormErrors();
            
            // Validate category name
            const categoryNameInput = document.getElementById('categoryName');
            const categoryName = categoryNameInput.value.trim();
            const categoryNameError = document.getElementById('categoryNameError');
            
            if (!categoryName) {
                categoryNameError.textContent = 'Category name is required';
                categoryNameError.style.display = 'block';
                categoryNameInput.classList.add('error');
                isValid = false;
            } else if (!/^[A-Za-z\s]+$/.test(categoryName)) {
                categoryNameError.textContent = 'Category name should contain only letters and spaces';
                categoryNameError.style.display = 'block';
                categoryNameInput.classList.add('error');
                isValid = false;
            } else {
                // Check if name already exists (case insensitive) for new categories
                const lowerCaseName = categoryName.toLowerCase();
                const isEdit = selectedCategoryId !== null;
                const currentCategory = isEdit ? 
                    document.querySelector(`tr[data-category-id="${selectedCategoryId}"] td:first-child`).textContent.toLowerCase() : '';
                
                if (!isEdit && existingCategories.includes(lowerCaseName)) {
                    categoryNameError.textContent = 'This category name already exists';
                    categoryNameError.style.display = 'block';
                    categoryNameInput.classList.add('error');
                    isValid = false;
                } else if (isEdit && lowerCaseName !== currentCategory && existingCategories.includes(lowerCaseName)) {
                    categoryNameError.textContent = 'This category name already exists';
                    categoryNameError.style.display = 'block';
                    categoryNameInput.classList.add('error');
                    isValid = false;
                }
            }
            
            // Validate description
            const descriptionInput = document.getElementById('categoryDescription');
            const description = descriptionInput.value.trim();
            const descriptionError = document.getElementById('descriptionError');
            
            if (!description) {
                descriptionError.textContent = 'Description is required';
                descriptionError.style.display = 'block';
                descriptionInput.classList.add('error');
                isValid = false;
            } else if (description.length < 5) {
                descriptionError.textContent = 'Description must be at least 5 characters long';
                descriptionError.style.display = 'block';
                descriptionInput.classList.add('error');
                isValid = false;
            }
            
            return isValid;
        }

        // Validate and save category
        function validateAndSaveCategory() {
            if (validateCategoryForm()) {
                saveCategory();
            }
        }

        async function saveCategory() {
            try {
                const form = document.getElementById('categoryForm');
                const formData = {
                    name: form.querySelector('input[name="name"]').value.trim(),
                    description: form.querySelector('textarea[name="description"]').value.trim(),
                    isListed: true // Default to listed
                };

                const url = selectedCategoryId 
                    ? `/admin/category/${selectedCategoryId}`
                    : '/admin/category';
                
                const response = await fetch(url, {
                    method: selectedCategoryId ? 'PUT' : 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (!response.ok) {
                    if (data.error === 'Category already exists') {
                        const categoryNameError = document.getElementById('categoryNameError');
                        categoryNameError.textContent = 'This category name already exists';
                        categoryNameError.style.display = 'block';
                        document.getElementById('categoryName').classList.add('error');
                        return;
                    }
                    throw new Error(data.error || 'Failed to save category');
                }

                closeModal('categoryFormModal');
                location.reload();
            } catch (error) {
                alert(error.message);
            }
        }

        async function deleteCategory() {
            if (!selectedCategoryId) {
                alert('Please select a category to delete');
                return;
            }

            try {
                const response = await fetch(`/admin/category/${selectedCategoryId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Failed to delete category');
                }

                closeModal('confirmDialog');
                location.reload();
            } catch (error) {
                alert(error.message);
            }
        }

        async function toggleStatus(categoryId) {
            try {
                const response = await fetch(`/admin/category/${categoryId}/toggle`, {
                    method: 'PATCH'
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Failed to update status');
                }

                const statusBadge = document.querySelector(`tr[data-category-id="${categoryId}"] .status-badge`);
                statusBadge.textContent = data.isListed ? 'Listed' : 'Unlisted';
                statusBadge.classList.toggle('unlisted', !data.isListed);
            } catch (error) {
                alert(error.message);
            }
        }

        // Real-time validation for category name
        document.getElementById('categoryName').addEventListener('input', function() {
            const categoryNameInput = this;
            const categoryNameError = document.getElementById('categoryNameError');
            const categoryName = categoryNameInput.value.trim();
            
            if (!categoryName) {
                categoryNameError.textContent = 'Category name is required';
                categoryNameError.style.display = 'block';
                categoryNameInput.classList.add('error');
            } else if (!/^[A-Za-z\s]+$/.test(categoryName)) {
                categoryNameError.textContent = 'Category name should contain only letters and spaces';
                categoryNameError.style.display = 'block';
                categoryNameInput.classList.add('error');
            } else {
                // Check if name already exists (case insensitive)
                const lowerCaseName = categoryName.toLowerCase();
                const isEdit = selectedCategoryId !== null;
                const currentCategory = isEdit ? 
                    document.querySelector(`tr[data-category-id="${selectedCategoryId}"] td:first-child`).textContent.toLowerCase() : '';
                
                if (!isEdit && existingCategories.includes(lowerCaseName)) {
                    categoryNameError.textContent = 'This category name already exists';
                    categoryNameError.style.display = 'block';
                    categoryNameInput.classList.add('error');
                } else if (isEdit && lowerCaseName !== currentCategory && existingCategories.includes(lowerCaseName)) {
                    categoryNameError.textContent = 'This category name already exists';
                    categoryNameError.style.display = 'block';
                    categoryNameInput.classList.add('error');
                } else {
                    categoryNameError.style.display = 'none';
                    categoryNameInput.classList.remove('error');
                }
            }
        });

        // Real-time validation for description
        document.getElementById('categoryDescription').addEventListener('input', function() {
            const descriptionInput = this;
            const descriptionError = document.getElementById('descriptionError');
            const description = descriptionInput.value.trim();
            
            if (!description) {
                descriptionError.textContent = 'Description is required';
                descriptionError.style.display = 'block';
                descriptionInput.classList.add('error');
            } else if (description.length < 5) {
                descriptionError.textContent = 'Description must be at least 5 characters long';
                descriptionError.style.display = 'block';
                descriptionInput.classList.add('error');
            } else {
                descriptionError.style.display = 'none';
                descriptionInput.classList.remove('error');
            }
        });

        // Search functionality
        const searchBox = document.querySelector('.search-box');
        searchBox.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const categoryName = row.querySelector('td:first-child').textContent.toLowerCase();
                const description = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                
                if (categoryName.includes(searchTerm) || description.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>